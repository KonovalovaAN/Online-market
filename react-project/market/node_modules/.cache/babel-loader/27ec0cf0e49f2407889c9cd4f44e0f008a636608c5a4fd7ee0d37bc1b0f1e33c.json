{"ast":null,"code":"var _jsxFileName = \"/home/plotvichka_2/bsu/3_course/TP/Online-market/react-project/market/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './Chat.css';\n// import './ChatAuth.css'\n// import './Error.css'\n// import axios from 'axios'\n// import messageIcon from './chatIcons/ChatIcon.svg';\n// import closeIcon from './chatIcons/CloseIcon.svg';\n// import backArrow from './chatIcons/BackArrow.png'\n// import sendIcon from './chatIcons/SendIcon.svg';\n// import searchIcon from './chatIcons/SearchIcon.svg';\n// import clipIcon from './chatIcons/ClipIcon.svg';\n// import stickerIcon from './chatIcons/StickerIcon.svg';\n//\n// const Chat = () => {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const [inputValue, setInputValue] = useState('');\n//   const [file, setFile] = useState(null);\n//   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n//   const [ws, setWs] = useState(null);\n//\n//   const [error, setError] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n//   const [isRegistering, setIsRegistering] = useState(false); // Registration state\n//   const [fromUser, setFromUser] = useState('');\n//   const [toUser, setToUser] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [password, setPassword] = useState('');\n//\n//   const [chats, setChats] = useState([]); // Все чаты\n//   const [searchQuery, setSearchQuery] = useState(\"\"); // Запрос поиска\n//   // const [selectedChat, setSelectedChat] = useState(null); // Текущий выбранный чат\n//\n//\n//   // useEffect(() => {\n//   //   console.log(\"using useEffect\")\n//   //   console.log(new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit'}));\n//   //   const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/`);\n//   //   socket.onopen = () => console.log('WebSocket connected');\n//   //   socket.onmessage = (event) => {\n//   //     const data = JSON.parse(event.data);\n//   //     console.log(data)\n//   //     // setMessages((prev) => [...prev, data]);\n//   //     // setMessages([data])\n//   //   };\n//   //   socket.onerror = (error) => console.error('WebSocket Error:', error);\n//   //   socket.onclose = () => console.log('WebSocket connection closed');\n//   //   setWs(socket);\n//   //\n//   //   return () => {\n//   //     socket.close();\n//   //   };\n//   // }, [fromUser]);\n//\n//     // const handleSend = () => {\n//     //   if (inputValue.trim() || file) {\n//     //     console.log(\"sending message..\")\n//     //     const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n//     //     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${username}/${selectedChat.username}/`);\n//     //     socket.onopen = () => {\n//     //       console.log('WebSocket connected');\n//     //       console.log(\"before send\")\n//     //       ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n//     //       console.log(\"after send\")\n//     //     }\n//     //     socket.onmessage = (event) => {\n//     //       const data = JSON.parse(event.data);\n//     //       selectedChat.messages = [selectedChat.messages, data.message]\n//     //       console.log(selectedChat)\n//     //       // setMessages((prev) => [...prev, data]);\n//     //       // setMessages([data])\n//     //     };\n//     //     socket.onerror = (error) => console.error('WebSocket Error:', error);\n//     //     socket.onclose = () => console.log('WebSocket connection closed');\n//     //     setWs(socket)\n//     //   // return () => {\n//     //   //   socket.close();\n//     //   // };\n//     //   //   if (ws) {\n//     //   //     ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n//     //   //   }\n//     //     setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n//     //     setInputValue('');\n//     //     setFile(null);\n//     //     console.log(\"end sending...\")\n//     //   }\n//     // };\n//\n//   const handleSend = () => {\n//   if (inputValue.trim() || file) {\n//     const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n//       console.log(\"ws exists\")\n//       console.log(ws)\n//       const messageData = JSON.stringify({\n//               text: inputValue,\n//               file: file ? URL.createObjectURL(file) : null,\n//               timestamp,\n//             });\n//\n//             ws.send(messageData);\n//             console.log(\"Message sent:\", messageData);\n//\n//             // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n//             setInputValue('');\n//             setFile(null);\n//   }\n// };\n//\n//\n//   const handleLogin = async () => {\n//   if (fromUser && password) {\n//     // setIsAuthenticated(true);\n//     try {\n//       let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n//       if (response.data.success) {\n//         setIsAuthenticated(true);\n//       } else {\n//         setError('Неверный логин или пароль');\n//       }\n//     } catch (error) {\n//       setError('Ошибка при авторизации');\n//     }\n//   } else {\n//     setError('Введите корректные данные для входа.');\n//   }\n// };\n//\n//   const handleClickOnChat = async (toUser) => {\n//     const response = await axios.post('http://localhost:8000/chat/load/', { fromUser, toUser });\n//     console.log(response)\n//     console.log(response.data)\n//\n//     // console.log(response.data.alina)\n//     setChats(response.data)\n//     console.log(\"Initializing WebSocket...\");\n//     console.log(`${toUser}`)\n//     console.log(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`)\n//       const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n//\n//       // Создаем Promise для ожидания успешного подключения WebSocket\n//       const waitForConnection = new Promise((resolve, reject) => {\n//         socket.onopen = () => {\n//           console.log('WebSocket connected');\n//           resolve(socket);\n//         };\n//         socket.onerror = (error) => {\n//           console.error('WebSocket Error:', error);\n//           reject(error);\n//         };\n//       });\n//\n//       waitForConnection\n//           .then((connectedSocket) => {\n//             setWs(connectedSocket);\n//           })\n//           .catch((error) => {\n//             console.error(\"Failed to establish WebSocket connection:\", error);\n//           });\n//\n//       socket.onmessage = (event) => {\n//         const data = JSON.parse(event.data);\n//         console.log(\"Message received:\", data);\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           // { text: data.message, type: 'received', timestamp: data.timestamp },\n//           data.message\n//         ]);\n//       }\n//\n//       socket.onclose = () => {\n//         console.log('WebSocket connection closed');\n//       };\n//   }\n//\n//\n//   const handleRegister = () => {\n//     // Mock registration logic; replace with API call if needed\n//     if (fromUser && password) {\n//       alert('Пользователь зарегистрирован!');\n//       setIsRegistering(false);\n//     } else {\n//       alert('Введите корректные данные для регистрации.');\n//     }\n//   };\n//\n//   if (!isAuthenticated) {\n//   return (\n//     <div className=\"auth-container\">\n//       <div className=\"auth-box\">\n//         <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Логин\"\n//           value={fromUser}\n//           onChange={(e) => setFromUser(e.target.value)}\n//           className=\"auth-input\"\n//         />\n//         <input\n//           type=\"password\"\n//           placeholder=\"Пароль\"\n//           value={password}\n//           onChange={(e) => setPassword(e.target.value)}\n//           className=\"auth-input\"\n//         />\n//         <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n//           {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n//         </button>\n//         <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n//           {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n//         </button>\n//\n//         {/* Отображение ошибки */}\n//         {error && (\n//   <div className=\"auth-error\">\n//     <img src=\"/path/to/error-icon.svg\" alt=\"Error\" className=\"error-icon\" />\n//     <span>{error}</span>\n//   </div>\n// )}\n//       </div>\n//     </div>\n//   );\n// }\n//\n//\n//\n//   return (\n//     <div>\n//       {!isOpen ? (\n//         <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n//           <div className=\"input-container\">\n//             Появились вопросы? Пишите нам!\n//             <div className=\"icon-container\">\n//               <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n//             </div>\n//           </div>\n//         </div>\n//       ) : (\n//         <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n//           <div className=\"chat-header\">\n//             {toUser ? (\n//                 <>\n//                   {/*<button*/}\n//                   {/*    className=\"back-button\"*/}\n//                   {/*    onClick={() => setSelectedChat(null)}*/}\n//                   {/*>*/}\n//                   {/*  ← Назад*/}\n//                   {/*</button>*/}\n//                   <img\n//                       src={backArrow}\n//                       alt=\"Назад\"\n//                       className=\"icon\"\n//                       onClick={() => {\n//                           ws.close();\n//                           setWs(null);\n//                           setToUser(null);\n//                         }\n//                       }\n//                   />\n//                   <span>Чат с {toUser}</span>\n//                 </>\n//             ) : (\n//                 <span>Ваши чаты</span>\n//             )}\n//             <img\n//                 src={closeIcon}\n//                 alt=\"Close chat\"\n//                 className=\"icon\"\n//               onClick={() => setIsOpen(false)}\n//             />\n//           </div>\n//\n//           {!toUser ? (\n//             <>\n//               {/* Поле поиска */}\n//               <div className=\"search-field\">\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Поиск чатов...\"\n//                   value={searchQuery}\n//                   onChange={(e) => setSearchQuery(e.target.value)}\n//                   className=\"search-input\"\n//                 />\n//               </div>\n//\n//               {/* Список чатов */}\n//               <div className=\"chat-list\">\n//                 {chats\n//                   .filter((chat) =>\n//                     chat.username\n//                       .toLowerCase()\n//                       .includes(searchQuery.toLowerCase())\n//                   )\n//                   .map((chat, index) => (\n//                     <div\n//                       key={index}\n//                       className=\"chat-item\"\n//                       onClick={() => {\n//                         console.log(\"set WebSocket\");\n//                         setToUser(chat.username);\n//                         handleClickOnChat(chat.username);\n//                         setMessages(chat.messages);\n//                       }\n//                       }\n//                     >\n//                       {chat.username}\n//                     </div>\n//                   ))}\n//               </div>\n//             </>\n//           ) : (\n//             <>\n//               {/* Переписка с выбранным собеседником */}\n//               <div className=\"chat-body\">\n//                 {messages\n//                   .map((msg, index) => (\n//                     <div\n//                       key={index}\n//                       // className={`message-bubble ${\n//                       //   msg.type === 'sent' ? 'sent' : 'received'\n//                       // }`}\n//                     >\n//                       {msg && <p>{msg}</p>}\n//                       {msg.timestamp && (\n//                         <span className=\"timestamp\">{msg.timestamp}</span>\n//                       )}\n//                     </div>\n//                   ))}\n//               </div>\n//\n//               {/* Поле ввода сообщения */}\n//               <div className=\"chat-input\">\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Введите сообщение\"\n//                     value={inputValue}\n//                     onChange={(e) => setInputValue(e.target.value)}\n//                     className=\"input-with-emoji\"\n//                 />\n//                 <img\n//                     src={stickerIcon}\n//                     alt=\"Стикеры\"\n//                     className=\"emoji-button\"\n//                     onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n//                 />\n//                 {/*<button*/}\n//                 {/*    className=\"emoji-button\"*/}\n//                 {/*    onClick={() => setShowEmojiPicker(!showEmojiPicker)}*/}\n//                 {/*>*/}\n//                 {/*  😊*/}\n//                 {/*</button>*/}\n//                 {/*<button className=\"send-button\" onClick={handleSend}>*/}\n//                 {/*  Отправить*/}\n//                 {/*</button>*/}\n//                 <img\n//                     src={sendIcon}\n//                     alt=\"Отправить\"\n//                     className=\"send-button\"\n//                     onClick={handleSend}\n//                 />\n//                 {showEmojiPicker && (\n//                     <div className=\"emoji-picker\">\n//                       {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n//                           <button\n//                               key={index}\n//                               onClick={() => setInputValue(inputValue + emoji)}\n//                           >\n//                             {emoji}\n//                           </button>\n//                       ))}\n//                     </div>\n//                 )}\n//               </div>\n//             </>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n//\n// export default Chat;\n\nimport React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport './ChatAuth.css';\nimport './Error.css';\nimport axios from 'axios';\nimport messageIcon from './chatIcons/ChatIcon.svg';\nimport closeIcon from './chatIcons/CloseIcon.svg';\nimport backArrow from './chatIcons/BackArrow.png';\nimport sendIcon from './chatIcons/SendIcon.svg';\nimport stickerIcon from './chatIcons/StickerIcon.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [file, setFile] = useState(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [ws, setWs] = useState(null);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [fromUser, setFromUser] = useState('');\n  const [toUser, setToUser] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [password, setPassword] = useState('');\n  const [chats, setChats] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Отправка сообщения\n  const handleSend = () => {\n    if (inputValue.trim() || file) {\n      const timestamp = new Date().toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      const messageData = {\n        text: inputValue,\n        file: file ? URL.createObjectURL(file) : null,\n        type: 'sended',\n        // Тип сообщения 'sended' для отправленного\n        timestamp\n      };\n\n      // Отправка сообщения через WebSocket\n      ws.send(JSON.stringify(messageData));\n\n      // Добавляем сообщение в локальное состояние\n      setMessages(prevMessages => [...prevMessages, messageData]);\n      setInputValue('');\n      setFile(null);\n    }\n  };\n\n  // Обработка получения сообщений через WebSocket\n  useEffect(() => {\n    if (ws) {\n      ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        console.log(\"Message received:\", data);\n\n        // Добавляем полученное сообщение в локальное состояние с типом 'received'\n        setMessages(prevMessages => [...prevMessages, {\n          ...data,\n          type: 'received'\n        }]);\n      };\n    }\n  }, [ws]);\n\n  // Логика для логина и регистрации не изменяется\n  const handleLogin = async () => {\n    if (fromUser && password) {\n      try {\n        let response = await axios.post('http://localhost:8000/chat/login/', {\n          fromUser,\n          password\n        });\n        if (response.data.success) {\n          setIsAuthenticated(true);\n        } else {\n          setError('Неверный логин или пароль');\n        }\n      } catch (error) {\n        setError('Ошибка при авторизации');\n      }\n    } else {\n      setError('Введите корректные данные для входа.');\n    }\n  };\n  const handleRegister = () => {\n    // Mock registration logic; replace with API call if needed\n    if (fromUser && password) {\n      alert('Пользователь зарегистрирован!');\n      setIsRegistering(false);\n    } else {\n      alert('Введите корректные данные для регистрации.');\n    }\n  };\n  const handleClickOnChat = async toUser => {\n    const response = await axios.post('http://localhost:8000/chat/load/', {\n      fromUser,\n      toUser\n    });\n    console.log(response.data);\n    setChats(response.data);\n\n    // Подключение к WebSocket\n    const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n    const waitForConnection = new Promise((resolve, reject) => {\n      socket.onopen = () => resolve(socket);\n      socket.onerror = error => reject(error);\n    });\n    waitForConnection.then(connectedSocket => {\n      setWs(connectedSocket);\n    }).catch(error => {\n      console.error(\"Failed to establish WebSocket connection:\", error);\n    });\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n  };\n\n  // UI для аутентификации\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isRegistering ? 'Регистрация' : 'Вход'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n          value: fromUser,\n          onChange: e => setFromUser(e.target.value),\n          className: \"auth-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"auth-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: isRegistering ? handleRegister : handleLogin,\n          className: \"auth-button\",\n          children: isRegistering ? 'Зарегистрироваться' : 'Войти'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsRegistering(!isRegistering),\n          className: \"toggle-button\",\n          children: isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-error\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      onClick: () => setIsOpen(true),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [\"\\u041F\\u043E\\u044F\\u0432\\u0438\\u043B\\u0438\\u0441\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B? \\u041F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u043D\\u0430\\u043C!\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: messageIcon,\n            alt: \"Message icon\",\n            className: \"icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-window ${isOpen ? 'open' : 'close'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: backArrow,\n          alt: \"\\u041D\\u0430\\u0437\\u0430\\u0434\",\n          className: \"icon\",\n          onClick: () => {\n            ws.close();\n            setWs(null);\n            setToUser(null);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u0427\\u0430\\u0442 \\u0441 \", toUser]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: closeIcon,\n          alt: \"Close chat\",\n          className: \"icon\",\n          onClick: () => setIsOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-bubble ${msg.type === 'sended' ? 'sent' : 'received'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timestamp\",\n            children: msg.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          className: \"input-with-emoji\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: stickerIcon,\n          alt: \"\\u0421\\u0442\\u0438\\u043A\\u0435\\u0440\\u044B\",\n          className: \"emoji-button\",\n          onClick: () => setShowEmojiPicker(!showEmojiPicker)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: sendIcon,\n          alt: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n          className: \"send-button\",\n          onClick: handleSend\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emoji-picker\",\n          children: ['😊', '😂', '😍', '😎'].map((emoji, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setInputValue(inputValue + emoji),\n            children: emoji\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 541,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"8nlu8QdAUyJSXrytkE3NdswmCms=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","axios","messageIcon","closeIcon","backArrow","sendIcon","stickerIcon","jsxDEV","_jsxDEV","Chat","_s","isOpen","setIsOpen","inputValue","setInputValue","file","setFile","showEmojiPicker","setShowEmojiPicker","ws","setWs","error","setError","isAuthenticated","setIsAuthenticated","isRegistering","setIsRegistering","fromUser","setFromUser","toUser","setToUser","messages","setMessages","password","setPassword","chats","setChats","searchQuery","setSearchQuery","handleSend","trim","timestamp","Date","toLocaleTimeString","hour","minute","messageData","text","URL","createObjectURL","type","send","JSON","stringify","prevMessages","onmessage","event","data","parse","console","log","handleLogin","response","post","success","handleRegister","alert","handleClickOnChat","socket","WebSocket","waitForConnection","Promise","resolve","reject","onopen","onerror","then","connectedSocket","catch","onclose","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","src","alt","close","map","msg","index","emoji","_c","$RefreshReg$"],"sources":["/home/plotvichka_2/bsu/3_course/TP/Online-market/react-project/market/src/components/Chat.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './Chat.css';\n// import './ChatAuth.css'\n// import './Error.css'\n// import axios from 'axios'\n// import messageIcon from './chatIcons/ChatIcon.svg';\n// import closeIcon from './chatIcons/CloseIcon.svg';\n// import backArrow from './chatIcons/BackArrow.png'\n// import sendIcon from './chatIcons/SendIcon.svg';\n// import searchIcon from './chatIcons/SearchIcon.svg';\n// import clipIcon from './chatIcons/ClipIcon.svg';\n// import stickerIcon from './chatIcons/StickerIcon.svg';\n//\n// const Chat = () => {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const [inputValue, setInputValue] = useState('');\n//   const [file, setFile] = useState(null);\n//   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n//   const [ws, setWs] = useState(null);\n//\n//   const [error, setError] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n//   const [isRegistering, setIsRegistering] = useState(false); // Registration state\n//   const [fromUser, setFromUser] = useState('');\n//   const [toUser, setToUser] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [password, setPassword] = useState('');\n//\n//   const [chats, setChats] = useState([]); // Все чаты\n//   const [searchQuery, setSearchQuery] = useState(\"\"); // Запрос поиска\n//   // const [selectedChat, setSelectedChat] = useState(null); // Текущий выбранный чат\n//\n//\n//   // useEffect(() => {\n//   //   console.log(\"using useEffect\")\n//   //   console.log(new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit'}));\n//   //   const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/`);\n//   //   socket.onopen = () => console.log('WebSocket connected');\n//   //   socket.onmessage = (event) => {\n//   //     const data = JSON.parse(event.data);\n//   //     console.log(data)\n//   //     // setMessages((prev) => [...prev, data]);\n//   //     // setMessages([data])\n//   //   };\n//   //   socket.onerror = (error) => console.error('WebSocket Error:', error);\n//   //   socket.onclose = () => console.log('WebSocket connection closed');\n//   //   setWs(socket);\n//   //\n//   //   return () => {\n//   //     socket.close();\n//   //   };\n//   // }, [fromUser]);\n//\n//     // const handleSend = () => {\n//     //   if (inputValue.trim() || file) {\n//     //     console.log(\"sending message..\")\n//     //     const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n//     //     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${username}/${selectedChat.username}/`);\n//     //     socket.onopen = () => {\n//     //       console.log('WebSocket connected');\n//     //       console.log(\"before send\")\n//     //       ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n//     //       console.log(\"after send\")\n//     //     }\n//     //     socket.onmessage = (event) => {\n//     //       const data = JSON.parse(event.data);\n//     //       selectedChat.messages = [selectedChat.messages, data.message]\n//     //       console.log(selectedChat)\n//     //       // setMessages((prev) => [...prev, data]);\n//     //       // setMessages([data])\n//     //     };\n//     //     socket.onerror = (error) => console.error('WebSocket Error:', error);\n//     //     socket.onclose = () => console.log('WebSocket connection closed');\n//     //     setWs(socket)\n//     //   // return () => {\n//     //   //   socket.close();\n//     //   // };\n//     //   //   if (ws) {\n//     //   //     ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n//     //   //   }\n//     //     setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n//     //     setInputValue('');\n//     //     setFile(null);\n//     //     console.log(\"end sending...\")\n//     //   }\n//     // };\n//\n//   const handleSend = () => {\n//   if (inputValue.trim() || file) {\n//     const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n//       console.log(\"ws exists\")\n//       console.log(ws)\n//       const messageData = JSON.stringify({\n//               text: inputValue,\n//               file: file ? URL.createObjectURL(file) : null,\n//               timestamp,\n//             });\n//\n//             ws.send(messageData);\n//             console.log(\"Message sent:\", messageData);\n//\n//             // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n//             setInputValue('');\n//             setFile(null);\n//   }\n// };\n//\n//\n//   const handleLogin = async () => {\n//   if (fromUser && password) {\n//     // setIsAuthenticated(true);\n//     try {\n//       let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n//       if (response.data.success) {\n//         setIsAuthenticated(true);\n//       } else {\n//         setError('Неверный логин или пароль');\n//       }\n//     } catch (error) {\n//       setError('Ошибка при авторизации');\n//     }\n//   } else {\n//     setError('Введите корректные данные для входа.');\n//   }\n// };\n//\n//   const handleClickOnChat = async (toUser) => {\n//     const response = await axios.post('http://localhost:8000/chat/load/', { fromUser, toUser });\n//     console.log(response)\n//     console.log(response.data)\n//\n//     // console.log(response.data.alina)\n//     setChats(response.data)\n//     console.log(\"Initializing WebSocket...\");\n//     console.log(`${toUser}`)\n//     console.log(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`)\n//       const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n//\n//       // Создаем Promise для ожидания успешного подключения WebSocket\n//       const waitForConnection = new Promise((resolve, reject) => {\n//         socket.onopen = () => {\n//           console.log('WebSocket connected');\n//           resolve(socket);\n//         };\n//         socket.onerror = (error) => {\n//           console.error('WebSocket Error:', error);\n//           reject(error);\n//         };\n//       });\n//\n//       waitForConnection\n//           .then((connectedSocket) => {\n//             setWs(connectedSocket);\n//           })\n//           .catch((error) => {\n//             console.error(\"Failed to establish WebSocket connection:\", error);\n//           });\n//\n//       socket.onmessage = (event) => {\n//         const data = JSON.parse(event.data);\n//         console.log(\"Message received:\", data);\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           // { text: data.message, type: 'received', timestamp: data.timestamp },\n//           data.message\n//         ]);\n//       }\n//\n//       socket.onclose = () => {\n//         console.log('WebSocket connection closed');\n//       };\n//   }\n//\n//\n//   const handleRegister = () => {\n//     // Mock registration logic; replace with API call if needed\n//     if (fromUser && password) {\n//       alert('Пользователь зарегистрирован!');\n//       setIsRegistering(false);\n//     } else {\n//       alert('Введите корректные данные для регистрации.');\n//     }\n//   };\n//\n//   if (!isAuthenticated) {\n//   return (\n//     <div className=\"auth-container\">\n//       <div className=\"auth-box\">\n//         <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Логин\"\n//           value={fromUser}\n//           onChange={(e) => setFromUser(e.target.value)}\n//           className=\"auth-input\"\n//         />\n//         <input\n//           type=\"password\"\n//           placeholder=\"Пароль\"\n//           value={password}\n//           onChange={(e) => setPassword(e.target.value)}\n//           className=\"auth-input\"\n//         />\n//         <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n//           {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n//         </button>\n//         <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n//           {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n//         </button>\n//\n//         {/* Отображение ошибки */}\n//         {error && (\n//   <div className=\"auth-error\">\n//     <img src=\"/path/to/error-icon.svg\" alt=\"Error\" className=\"error-icon\" />\n//     <span>{error}</span>\n//   </div>\n// )}\n//       </div>\n//     </div>\n//   );\n// }\n//\n//\n//\n//   return (\n//     <div>\n//       {!isOpen ? (\n//         <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n//           <div className=\"input-container\">\n//             Появились вопросы? Пишите нам!\n//             <div className=\"icon-container\">\n//               <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n//             </div>\n//           </div>\n//         </div>\n//       ) : (\n//         <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n//           <div className=\"chat-header\">\n//             {toUser ? (\n//                 <>\n//                   {/*<button*/}\n//                   {/*    className=\"back-button\"*/}\n//                   {/*    onClick={() => setSelectedChat(null)}*/}\n//                   {/*>*/}\n//                   {/*  ← Назад*/}\n//                   {/*</button>*/}\n//                   <img\n//                       src={backArrow}\n//                       alt=\"Назад\"\n//                       className=\"icon\"\n//                       onClick={() => {\n//                           ws.close();\n//                           setWs(null);\n//                           setToUser(null);\n//                         }\n//                       }\n//                   />\n//                   <span>Чат с {toUser}</span>\n//                 </>\n//             ) : (\n//                 <span>Ваши чаты</span>\n//             )}\n//             <img\n//                 src={closeIcon}\n//                 alt=\"Close chat\"\n//                 className=\"icon\"\n//               onClick={() => setIsOpen(false)}\n//             />\n//           </div>\n//\n//           {!toUser ? (\n//             <>\n//               {/* Поле поиска */}\n//               <div className=\"search-field\">\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Поиск чатов...\"\n//                   value={searchQuery}\n//                   onChange={(e) => setSearchQuery(e.target.value)}\n//                   className=\"search-input\"\n//                 />\n//               </div>\n//\n//               {/* Список чатов */}\n//               <div className=\"chat-list\">\n//                 {chats\n//                   .filter((chat) =>\n//                     chat.username\n//                       .toLowerCase()\n//                       .includes(searchQuery.toLowerCase())\n//                   )\n//                   .map((chat, index) => (\n//                     <div\n//                       key={index}\n//                       className=\"chat-item\"\n//                       onClick={() => {\n//                         console.log(\"set WebSocket\");\n//                         setToUser(chat.username);\n//                         handleClickOnChat(chat.username);\n//                         setMessages(chat.messages);\n//                       }\n//                       }\n//                     >\n//                       {chat.username}\n//                     </div>\n//                   ))}\n//               </div>\n//             </>\n//           ) : (\n//             <>\n//               {/* Переписка с выбранным собеседником */}\n//               <div className=\"chat-body\">\n//                 {messages\n//                   .map((msg, index) => (\n//                     <div\n//                       key={index}\n//                       // className={`message-bubble ${\n//                       //   msg.type === 'sent' ? 'sent' : 'received'\n//                       // }`}\n//                     >\n//                       {msg && <p>{msg}</p>}\n//                       {msg.timestamp && (\n//                         <span className=\"timestamp\">{msg.timestamp}</span>\n//                       )}\n//                     </div>\n//                   ))}\n//               </div>\n//\n//               {/* Поле ввода сообщения */}\n//               <div className=\"chat-input\">\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Введите сообщение\"\n//                     value={inputValue}\n//                     onChange={(e) => setInputValue(e.target.value)}\n//                     className=\"input-with-emoji\"\n//                 />\n//                 <img\n//                     src={stickerIcon}\n//                     alt=\"Стикеры\"\n//                     className=\"emoji-button\"\n//                     onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n//                 />\n//                 {/*<button*/}\n//                 {/*    className=\"emoji-button\"*/}\n//                 {/*    onClick={() => setShowEmojiPicker(!showEmojiPicker)}*/}\n//                 {/*>*/}\n//                 {/*  😊*/}\n//                 {/*</button>*/}\n//                 {/*<button className=\"send-button\" onClick={handleSend}>*/}\n//                 {/*  Отправить*/}\n//                 {/*</button>*/}\n//                 <img\n//                     src={sendIcon}\n//                     alt=\"Отправить\"\n//                     className=\"send-button\"\n//                     onClick={handleSend}\n//                 />\n//                 {showEmojiPicker && (\n//                     <div className=\"emoji-picker\">\n//                       {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n//                           <button\n//                               key={index}\n//                               onClick={() => setInputValue(inputValue + emoji)}\n//                           >\n//                             {emoji}\n//                           </button>\n//                       ))}\n//                     </div>\n//                 )}\n//               </div>\n//             </>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n//\n// export default Chat;\n\n\nimport React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport './ChatAuth.css'\nimport './Error.css'\nimport axios from 'axios'\nimport messageIcon from './chatIcons/ChatIcon.svg';\nimport closeIcon from './chatIcons/CloseIcon.svg';\nimport backArrow from './chatIcons/BackArrow.png'\nimport sendIcon from './chatIcons/SendIcon.svg';\nimport stickerIcon from './chatIcons/StickerIcon.svg';\n\nconst Chat = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [file, setFile] = useState(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [ws, setWs] = useState(null);\n\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [fromUser, setFromUser] = useState('');\n  const [toUser, setToUser] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [password, setPassword] = useState('');\n\n  const [chats, setChats] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Отправка сообщения\n  const handleSend = () => {\n    if (inputValue.trim() || file) {\n      const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n      const messageData = {\n        text: inputValue,\n        file: file ? URL.createObjectURL(file) : null,\n        type: 'sended',  // Тип сообщения 'sended' для отправленного\n        timestamp\n      };\n\n      // Отправка сообщения через WebSocket\n      ws.send(JSON.stringify(messageData));\n\n      // Добавляем сообщение в локальное состояние\n      setMessages((prevMessages) => [...prevMessages, messageData]);\n      setInputValue('');\n      setFile(null);\n    }\n  };\n\n  // Обработка получения сообщений через WebSocket\n  useEffect(() => {\n    if (ws) {\n      ws.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        console.log(\"Message received:\", data);\n\n        // Добавляем полученное сообщение в локальное состояние с типом 'received'\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { ...data, type: 'received' }\n        ]);\n      };\n    }\n  }, [ws]);\n\n  // Логика для логина и регистрации не изменяется\n  const handleLogin = async () => {\n    if (fromUser && password) {\n      try {\n        let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n        if (response.data.success) {\n          setIsAuthenticated(true);\n        } else {\n          setError('Неверный логин или пароль');\n        }\n      } catch (error) {\n        setError('Ошибка при авторизации');\n      }\n    } else {\n      setError('Введите корректные данные для входа.');\n    }\n  };\n  \n    const handleRegister = () => {\n    // Mock registration logic; replace with API call if needed\n    if (fromUser && password) {\n      alert('Пользователь зарегистрирован!');\n      setIsRegistering(false);\n    } else {\n      alert('Введите корректные данные для регистрации.');\n    }\n  };\n\n  const handleClickOnChat = async (toUser) => {\n    const response = await axios.post('http://localhost:8000/chat/load/', { fromUser, toUser });\n    console.log(response.data);\n    setChats(response.data);\n\n    // Подключение к WebSocket\n    const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n\n    const waitForConnection = new Promise((resolve, reject) => {\n      socket.onopen = () => resolve(socket);\n      socket.onerror = (error) => reject(error);\n    });\n\n    waitForConnection\n      .then((connectedSocket) => {\n        setWs(connectedSocket);\n      })\n      .catch((error) => {\n        console.error(\"Failed to establish WebSocket connection:\", error);\n      });\n\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n  };\n\n  // UI для аутентификации\n  if (!isAuthenticated) {\n    return (\n      <div className=\"auth-container\">\n        <div className=\"auth-box\">\n          <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n          <input\n            type=\"text\"\n            placeholder=\"Логин\"\n            value={fromUser}\n            onChange={(e) => setFromUser(e.target.value)}\n            className=\"auth-input\"\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Пароль\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"auth-input\"\n          />\n          <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n            {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n          </button>\n          <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n            {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n          </button>\n\n          {error && (\n            <div className=\"auth-error\">\n              <span>{error}</span>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {!isOpen ? (\n        <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n          <div className=\"input-container\">\n            Появились вопросы? Пишите нам!\n            <div className=\"icon-container\">\n              <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n          <div className=\"chat-header\">\n            <img\n              src={backArrow}\n              alt=\"Назад\"\n              className=\"icon\"\n              onClick={() => {\n                ws.close();\n                setWs(null);\n                setToUser(null);\n              }}\n            />\n            <span>Чат с {toUser}</span>\n            <img\n              src={closeIcon}\n              alt=\"Close chat\"\n              className=\"icon\"\n              onClick={() => setIsOpen(false)}\n            />\n          </div>\n\n          <div className=\"chat-body\">\n            {messages.map((msg, index) => (\n              <div\n                key={index}\n                className={`message-bubble ${msg.type === 'sended' ? 'sent' : 'received'}`}\n              >\n                <p>{msg.text}</p>\n                <span className=\"timestamp\">{msg.timestamp}</span>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"chat-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Введите сообщение\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              className=\"input-with-emoji\"\n            />\n            <img\n              src={stickerIcon}\n              alt=\"Стикеры\"\n              className=\"emoji-button\"\n              onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n            />\n            <img\n              src={sendIcon}\n              alt=\"Отправить\"\n              className=\"send-button\"\n              onClick={handleSend}\n            />\n            {showEmojiPicker && (\n              <div className=\"emoji-picker\">\n                {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setInputValue(inputValue + emoji)}\n                  >\n                    {emoji}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AACnB,OAAO,gBAAgB;AACvB,OAAO,aAAa;AACpB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,WAAW,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,IAAI,EAAEC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}