{"ast":null,"code":"var _jsxFileName = \"/home/plotvichka_2/bsu/3_course/TP/Online-market/react-project/market/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport './ChatAuth.css';\nimport './Error.css';\nimport axios from 'axios';\nimport messageIcon from './chatIcons/ChatIcon.svg';\nimport closeIcon from './chatIcons/CloseIcon.svg';\nimport backArrow from './chatIcons/BackArrow.png';\nimport sendIcon from './chatIcons/SendIcon.svg';\nimport searchIcon from './chatIcons/SearchIcon.svg';\nimport clipIcon from './chatIcons/ClipIcon.svg';\nimport stickerIcon from './chatIcons/StickerIcon.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [file, setFile] = useState(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [ws, setWs] = useState(null);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n  const [isRegistering, setIsRegistering] = useState(false); // Registration state\n  const [fromUser, setFromUser] = useState('');\n  const [toUser, setToUser] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [password, setPassword] = useState('');\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Запрос поиска\n  const [conversations, setConversations] = useState([]);\n\n  // useEffect(() => {\n  //   console.log(\"using useEffect\")\n  //   console.log(new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit'}));\n  //   const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/`);\n  //   socket.onopen = () => console.log('WebSocket connected');\n  //   socket.onmessage = (event) => {\n  //     const data = JSON.parse(event.data);\n  //     console.log(data)\n  //     // setMessages((prev) => [...prev, data]);\n  //     // setMessages([data])\n  //   };\n  //   socket.onerror = (error) => console.error('WebSocket Error:', error);\n  //   socket.onclose = () => console.log('WebSocket connection closed');\n  //   setWs(socket);\n  //\n  //   return () => {\n  //     socket.close();\n  //   };\n  // }, [fromUser]);\n\n  // const handleSend = () => {\n  //   if (inputValue.trim() || file) {\n  //     console.log(\"sending message..\")\n  //     const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  //     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${username}/${selectedChat.username}/`);\n  //     socket.onopen = () => {\n  //       console.log('WebSocket connected');\n  //       console.log(\"before send\")\n  //       ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n  //       console.log(\"after send\")\n  //     }\n  //     socket.onmessage = (event) => {\n  //       const data = JSON.parse(event.data);\n  //       selectedChat.messages = [selectedChat.messages, data.message]\n  //       console.log(selectedChat)\n  //       // setMessages((prev) => [...prev, data]);\n  //       // setMessages([data])\n  //     };\n  //     socket.onerror = (error) => console.error('WebSocket Error:', error);\n  //     socket.onclose = () => console.log('WebSocket connection closed');\n  //     setWs(socket)\n  //   // return () => {\n  //   //   socket.close();\n  //   // };\n  //   //   if (ws) {\n  //   //     ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n  //   //   }\n  //     setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n  //     setInputValue('');\n  //     setFile(null);\n  //     console.log(\"end sending...\")\n  //   }\n  // };\n\n  const handleSend = () => {\n    if (inputValue.trim() || file) {\n      const timestamp = new Date().toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      console.log(\"ws exists\");\n      console.log(ws);\n      const messageData = JSON.stringify({\n        text: inputValue,\n        file: file ? URL.createObjectURL(file) : null,\n        timestamp\n      });\n      ws.send(messageData);\n      console.log(\"Message sent:\", messageData);\n\n      // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n      setInputValue('');\n      setFile(null);\n    }\n  };\n  const handleLogin = async () => {\n    if (fromUser && password) {\n      // setIsAuthenticated(true);\n      try {\n        let response = await axios.post('http://localhost:8000/chat/login/', {\n          fromUser,\n          password\n        });\n        if (response.data.success) {\n          setIsAuthenticated(true);\n        } else {\n          setError('Неверный логин или пароль');\n        }\n      } catch (error) {\n        setError('Ошибка при авторизации');\n      }\n    } else {\n      setError('Введите корректные данные для входа.');\n    }\n  };\n  const handleClickOnChat = async toUser => {\n    const response = await axios.post('http://localhost:8000/chat/load/messages/', {\n      fromUser,\n      toUser\n    });\n    console.log(response);\n    console.log(response.data);\n    setMessages(response.data);\n    console.log(\"Messages set\");\n\n    // console.log(response.data.alina)\n    console.log(\"Initializing WebSocket...\");\n    console.log(`${toUser}`);\n    // const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n    //\n    // // Создаем Promise для ожидания успешного подключения WebSocket\n    // const waitForConnection = new Promise((resolve, reject) => {\n    //   socket.onopen = () => {\n    //     console.log('WebSocket connected');\n    //     resolve(socket);\n    //   };\n    //   socket.onerror = (error) => {\n    //     console.error('WebSocket Error:', error);\n    //     reject(error);\n    //   };\n    // });\n    //\n    // waitForConnection\n    //     .then((connectedSocket) => {\n    //       setWs(connectedSocket);\n    //     })\n    //     .catch((error) => {\n    //       console.error(\"Failed to establish WebSocket connection:\", error);\n    //     });\n    //\n    // socket.onmessage = (event) => {\n    //   const data = JSON.parse(event.data);\n    //   console.log(\"Message received:\", data);\n    //   setMessages((prevMessages) => [\n    //     ...prevMessages,\n    //     // { text: data.message, type: 'received', timestamp: data.timestamp },\n    //     data.message\n    //   ]);\n    // }\n    //\n    // socket.onclose = () => {\n    //   console.log('WebSocket connection closed');\n    // };\n  };\n  const handleRegister = () => {\n    // Mock registration logic; replace with API call if needed\n    if (fromUser && password) {\n      alert('Пользователь зарегистрирован!');\n      setIsRegistering(false);\n    } else {\n      alert('Введите корректные данные для регистрации.');\n    }\n  };\n  const loadConversations = async () => {\n    const response = await axios.post('http://localhost:8000/chat/load/conversations/', {\n      fromUser\n    });\n    console.log(response);\n    console.log(response.data);\n    setConversations(response.data);\n  };\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isRegistering ? 'Регистрация' : 'Вход'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n          value: fromUser,\n          onChange: e => setFromUser(e.target.value),\n          className: \"auth-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"auth-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: isRegistering ? handleRegister : handleLogin,\n          className: \"auth-button\",\n          children: isRegistering ? 'Зарегистрироваться' : 'Войти'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsRegistering(!isRegistering),\n          className: \"toggle-button\",\n          children: isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/path/to/error-icon.svg\",\n            alt: \"Error\",\n            className: \"error-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      onClick: () => setIsOpen(true),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        onClick: () => loadConversations(),\n        children: [\"\\u041F\\u043E\\u044F\\u0432\\u0438\\u043B\\u0438\\u0441\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B? \\u041F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u043D\\u0430\\u043C!\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: messageIcon,\n            alt: \"Message icon\",\n            className: \"icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-window ${isOpen ? 'open' : 'close'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [toUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: backArrow,\n            alt: \"\\u041D\\u0430\\u0437\\u0430\\u0434\",\n            className: \"icon\",\n            onClick: () => {\n              ws.close();\n              setWs(null);\n              setToUser(null);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"\\u0427\\u0430\\u0442 \\u0441 \", toUser]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u0412\\u0430\\u0448\\u0438 \\u0447\\u0430\\u0442\\u044B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: closeIcon,\n          alt: \"Close chat\",\n          className: \"icon\",\n          onClick: () => setIsOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }, this), !toUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-field\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0447\\u0430\\u0442\\u043E\\u0432...\",\n            value: searchQuery,\n            onChange: e => setSearchQuery(e.target.value),\n            className: \"search-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-list\",\n          children: conversations.filter(conversation => conversation.username.toLowerCase().includes(searchQuery.toLowerCase())).map((conversation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-item\",\n            onClick: () => {\n              console.log(\"set WebSocket\");\n              setToUser(conversation.username);\n              handleClickOnChat(conversation.username);\n            },\n            children: conversation.username\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 31\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-body\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [msg && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 41\n            }, this), msg.timestamp && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"timestamp\",\n              children: msg.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 31\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n            value: inputValue,\n            onChange: e => setInputValue(e.target.value),\n            className: \"input-with-emoji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: stickerIcon,\n            alt: \"\\u0421\\u0442\\u0438\\u043A\\u0435\\u0440\\u044B\",\n            className: \"emoji-button\",\n            onClick: () => setShowEmojiPicker(!showEmojiPicker)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: sendIcon,\n            alt: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n            className: \"send-button\",\n            onClick: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 23\n          }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"emoji-picker\",\n            children: ['😊', '😂', '😍', '😎'].map((emoji, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setInputValue(inputValue + emoji),\n              children: emoji\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 7\n  }, this);\n};\n_s(Chat, \"WUHoYKMkakYfYehgQvNrMlUGwJU=\");\n_c = Chat;\nexport default Chat;\n\n// import React, { useState, useEffect } from 'react';\n// import './Chat.css';\n// import './ChatAuth.css'\n// import './Error.css'\n// import axios from 'axios'\n// import messageIcon from './chatIcons/ChatIcon.svg';\n// import closeIcon from './chatIcons/CloseIcon.svg';\n// import backArrow from './chatIcons/BackArrow.png'\n// import sendIcon from './chatIcons/SendIcon.svg';\n// import stickerIcon from './chatIcons/StickerIcon.svg';\n//\n// const Chat = () => {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const [inputValue, setInputValue] = useState('');\n//   const [file, setFile] = useState(null);\n//   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n//   const [ws, setWs] = useState(null);\n//\n//   const [error, setError] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [isRegistering, setIsRegistering] = useState(false);\n//   const [fromUser, setFromUser] = useState('');\n//   const [toUser, setToUser] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [password, setPassword] = useState('');\n//\n//   const [chats, setChats] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//\n//   // Отправка сообщения\n//   const handleSend = () => {\n//     if (inputValue.trim() || file) {\n//       const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n//       const messageData = {\n//         text: inputValue,\n//         file: file ? URL.createObjectURL(file) : null,\n//         type: 'sent',  // Тип сообщения 'sended' для отправленного\n//         timestamp\n//       };\n//\n//       // Отправка сообщения через WebSocket\n//       ws.send(JSON.stringify(messageData));\n//\n//       // Добавляем сообщение в локальное состояние\n//       setMessages((prevMessages) => [...prevMessages, messageData]);\n//       setInputValue('');\n//       setFile(null);\n//     }\n//   };\n//\n//   // Обработка получения сообщений через WebSocket\n//   useEffect(() => {\n//     if (ws) {\n//       ws.onmessage = (event) => {\n//         const data = JSON.parse(event.data);\n//         console.log(\"Message received:\", data);\n//\n//         // Добавляем полученное сообщение в локальное состояние с типом 'received'\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { ...data, type: 'received' }\n//         ]);\n//       };\n//     }\n//   }, [ws]);\n//\n//   // Логика для логина и регистрации не изменяется\n//   const handleLogin = async () => {\n//     if (fromUser && password) {\n//       try {\n//         let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n//         if (response.data.success) {\n//           setIsAuthenticated(true);\n//         } else {\n//           setError('Неверный логин или пароль');\n//         }\n//       } catch (error) {\n//         setError('Ошибка при авторизации');\n//       }\n//     } else {\n//       setError('Введите корректные данные для входа.');\n//     }\n//   };\n//\n//     const handleRegister = () => {\n//     // Mock registration logic; replace with API call if needed\n//     if (fromUser && password) {\n//       alert('Пользователь зарегистрирован!');\n//       setIsRegistering(false);\n//     } else {\n//       alert('Введите корректные данные для регистрации.');\n//     }\n//   };\n//\n//   const handleClickOnChat = async (toUser) => {\n//     const response = await axios.post('http://localhost:8000/chat/load/', { fromUser, toUser });\n//     console.log(response.data);\n//     setChats(response.data);\n//\n//     // Подключение к WebSocket\n//     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n//\n//     const waitForConnection = new Promise((resolve, reject) => {\n//       socket.onopen = () => resolve(socket);\n//       socket.onerror = (error) => reject(error);\n//     });\n//\n//     waitForConnection\n//       .then((connectedSocket) => {\n//         setWs(connectedSocket);\n//       })\n//       .catch((error) => {\n//         console.error(\"Failed to establish WebSocket connection:\", error);\n//       });\n//\n//     socket.onclose = () => {\n//       console.log('WebSocket connection closed');\n//     };\n//   };\n//\n//   // UI для аутентификации\n//   if (!isAuthenticated) {\n//     return (\n//       <div className=\"auth-container\">\n//         <div className=\"auth-box\">\n//           <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Логин\"\n//             value={fromUser}\n//             onChange={(e) => setFromUser(e.target.value)}\n//             className=\"auth-input\"\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"Пароль\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             className=\"auth-input\"\n//           />\n//           <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n//             {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n//           </button>\n//           <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n//             {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n//           </button>\n//\n//           {error && (\n//             <div className=\"auth-error\">\n//               <span>{error}</span>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     );\n//   }\n//\n//   return (\n//     <div>\n//       {!isOpen ? (\n//         <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n//           <div className=\"input-container\">\n//             Появились вопросы? Пишите нам!\n//             <div className=\"icon-container\">\n//               <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n//             </div>\n//           </div>\n//         </div>\n//       ) : (\n//         <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n//           <div className=\"chat-header\">\n//             <img\n//               src={backArrow}\n//               alt=\"Назад\"\n//               className=\"icon\"\n//               onClick={() => {\n//                 ws.close();\n//                 setWs(null);\n//                 setToUser(null);\n//               }}\n//             />\n//             <span>Чат с {toUser}</span>\n//             <img\n//               src={closeIcon}\n//               alt=\"Close chat\"\n//               className=\"icon\"\n//               onClick={() => setIsOpen(false)}\n//             />\n//           </div>\n//\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={`message-bubble ${msg.type === 'sent' ? 'sent' : 'received'}`}\n//               >\n//                 <p>{msg.text}</p>\n//                 <span className=\"timestamp\">{msg.timestamp}</span>\n//               </div>\n//             ))}\n//           </div>\n//\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Введите сообщение\"\n//               value={inputValue}\n//               onChange={(e) => setInputValue(e.target.value)}\n//               className=\"input-with-emoji\"\n//             />\n//             <img\n//               src={stickerIcon}\n//               alt=\"Стикеры\"\n//               className=\"emoji-button\"\n//               onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n//             />\n//             <img\n//               src={sendIcon}\n//               alt=\"Отправить\"\n//               className=\"send-button\"\n//               onClick={handleSend}\n//             />\n//             {showEmojiPicker && (\n//               <div className=\"emoji-picker\">\n//                 {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n//                   <button\n//                     key={index}\n//                     onClick={() => setInputValue(inputValue + emoji)}\n//                   >\n//                     {emoji}\n//                   </button>\n//                 ))}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n//\n// export default Chat;\nconsole.log(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","axios","messageIcon","closeIcon","backArrow","sendIcon","searchIcon","clipIcon","stickerIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","isOpen","setIsOpen","inputValue","setInputValue","file","setFile","showEmojiPicker","setShowEmojiPicker","ws","setWs","error","setError","isAuthenticated","setIsAuthenticated","isRegistering","setIsRegistering","fromUser","setFromUser","toUser","setToUser","messages","setMessages","password","setPassword","searchQuery","setSearchQuery","conversations","setConversations","handleSend","trim","timestamp","Date","toLocaleTimeString","hour","minute","console","log","messageData","JSON","stringify","text","URL","createObjectURL","send","handleLogin","response","post","data","success","handleClickOnChat","handleRegister","alert","loadConversations","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","src","alt","close","filter","conversation","username","toLowerCase","includes","map","index","msg","emoji","_c","$RefreshReg$"],"sources":["/home/plotvichka_2/bsu/3_course/TP/Online-market/react-project/market/src/components/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport './ChatAuth.css'\nimport './Error.css'\nimport axios from 'axios'\nimport messageIcon from './chatIcons/ChatIcon.svg';\nimport closeIcon from './chatIcons/CloseIcon.svg';\nimport backArrow from './chatIcons/BackArrow.png'\nimport sendIcon from './chatIcons/SendIcon.svg';\nimport searchIcon from './chatIcons/SearchIcon.svg';\nimport clipIcon from './chatIcons/ClipIcon.svg';\nimport stickerIcon from './chatIcons/StickerIcon.svg';\n\nconst Chat = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [file, setFile] = useState(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [ws, setWs] = useState(null);\n\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n  const [isRegistering, setIsRegistering] = useState(false); // Registration state\n  const [fromUser, setFromUser] = useState('');\n  const [toUser, setToUser] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [password, setPassword] = useState('');\n\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Запрос поиска\n  const [conversations, setConversations] = useState([])\n\n\n  // useEffect(() => {\n  //   console.log(\"using useEffect\")\n  //   console.log(new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit'}));\n  //   const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/`);\n  //   socket.onopen = () => console.log('WebSocket connected');\n  //   socket.onmessage = (event) => {\n  //     const data = JSON.parse(event.data);\n  //     console.log(data)\n  //     // setMessages((prev) => [...prev, data]);\n  //     // setMessages([data])\n  //   };\n  //   socket.onerror = (error) => console.error('WebSocket Error:', error);\n  //   socket.onclose = () => console.log('WebSocket connection closed');\n  //   setWs(socket);\n  //\n  //   return () => {\n  //     socket.close();\n  //   };\n  // }, [fromUser]);\n\n    // const handleSend = () => {\n    //   if (inputValue.trim() || file) {\n    //     console.log(\"sending message..\")\n    //     const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    //     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${username}/${selectedChat.username}/`);\n    //     socket.onopen = () => {\n    //       console.log('WebSocket connected');\n    //       console.log(\"before send\")\n    //       ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n    //       console.log(\"after send\")\n    //     }\n    //     socket.onmessage = (event) => {\n    //       const data = JSON.parse(event.data);\n    //       selectedChat.messages = [selectedChat.messages, data.message]\n    //       console.log(selectedChat)\n    //       // setMessages((prev) => [...prev, data]);\n    //       // setMessages([data])\n    //     };\n    //     socket.onerror = (error) => console.error('WebSocket Error:', error);\n    //     socket.onclose = () => console.log('WebSocket connection closed');\n    //     setWs(socket)\n    //   // return () => {\n    //   //   socket.close();\n    //   // };\n    //   //   if (ws) {\n    //   //     ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n    //   //   }\n    //     setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n    //     setInputValue('');\n    //     setFile(null);\n    //     console.log(\"end sending...\")\n    //   }\n    // };\n\n  const handleSend = () => {\n  if (inputValue.trim() || file) {\n    const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n      console.log(\"ws exists\")\n      console.log(ws)\n      const messageData = JSON.stringify({\n              text: inputValue,\n              file: file ? URL.createObjectURL(file) : null,\n              timestamp,\n            });\n\n            ws.send(messageData);\n            console.log(\"Message sent:\", messageData);\n\n            // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n            setInputValue('');\n            setFile(null);\n  }\n};\n\n\n  const handleLogin = async () => {\n  if (fromUser && password) {\n    // setIsAuthenticated(true);\n    try {\n      let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n      if (response.data.success) {\n        setIsAuthenticated(true);\n      } else {\n        setError('Неверный логин или пароль');\n      }\n    } catch (error) {\n      setError('Ошибка при авторизации');\n    }\n  } else {\n    setError('Введите корректные данные для входа.');\n  }\n};\n\n  const handleClickOnChat = async (toUser) => {\n    const response = await axios.post('http://localhost:8000/chat/load/messages/', { fromUser, toUser });\n    console.log(response)\n    console.log(response.data)\n    setMessages(response.data)\n    console.log(\"Messages set\")\n\n    // console.log(response.data.alina)\n    console.log(\"Initializing WebSocket...\");\n    console.log(`${toUser}`)\n    // const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n    //\n    // // Создаем Promise для ожидания успешного подключения WebSocket\n    // const waitForConnection = new Promise((resolve, reject) => {\n    //   socket.onopen = () => {\n    //     console.log('WebSocket connected');\n    //     resolve(socket);\n    //   };\n    //   socket.onerror = (error) => {\n    //     console.error('WebSocket Error:', error);\n    //     reject(error);\n    //   };\n    // });\n    //\n    // waitForConnection\n    //     .then((connectedSocket) => {\n    //       setWs(connectedSocket);\n    //     })\n    //     .catch((error) => {\n    //       console.error(\"Failed to establish WebSocket connection:\", error);\n    //     });\n    //\n    // socket.onmessage = (event) => {\n    //   const data = JSON.parse(event.data);\n    //   console.log(\"Message received:\", data);\n    //   setMessages((prevMessages) => [\n    //     ...prevMessages,\n    //     // { text: data.message, type: 'received', timestamp: data.timestamp },\n    //     data.message\n    //   ]);\n    // }\n    //\n    // socket.onclose = () => {\n    //   console.log('WebSocket connection closed');\n    // };\n  }\n\n\n  const handleRegister = () => {\n    // Mock registration logic; replace with API call if needed\n    if (fromUser && password) {\n      alert('Пользователь зарегистрирован!');\n      setIsRegistering(false);\n    } else {\n      alert('Введите корректные данные для регистрации.');\n    }\n  };\n\n  const loadConversations = async () => {\n    const response = await axios.post('http://localhost:8000/chat/load/conversations/', { fromUser });\n    console.log(response)\n    console.log(response.data)\n    setConversations(response.data)\n  }\n\n  if (!isAuthenticated) {\n    return (\n        <div className=\"auth-container\">\n          <div className=\"auth-box\">\n            <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n            <input\n                type=\"text\"\n                placeholder=\"Логин\"\n                value={fromUser}\n                onChange={(e) => setFromUser(e.target.value)}\n                className=\"auth-input\"\n            />\n            <input\n                type=\"password\"\n                placeholder=\"Пароль\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"auth-input\"\n            />\n            <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n              {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n            </button>\n            <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n              {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n            </button>\n\n            {/* Отображение ошибки */}\n            {error && (\n                <div className=\"auth-error\">\n                  <img src=\"/path/to/error-icon.svg\" alt=\"Error\" className=\"error-icon\" />\n                  <span>{error}</span>\n                </div>\n            )}\n          </div>\n        </div>\n    );\n  }\n\n\n\n  return (\n      <div>\n        {!isOpen ? (\n            <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n              <div className=\"input-container\"\n                   onClick={() => loadConversations()}\n              >\n                Появились вопросы? Пишите нам!\n                <div className=\"icon-container\">\n                  <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n                </div>\n              </div>\n            </div>\n        ) : (\n            <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n              <div className=\"chat-header\">\n                {toUser ? (\n                    <>\n                      {/*<button*/}\n                      {/*    className=\"back-button\"*/}\n                      {/*    onClick={() => setSelectedChat(null)}*/}\n                      {/*>*/}\n                      {/*  ← Назад*/}\n                      {/*</button>*/}\n                      <img\n                          src={backArrow}\n                          alt=\"Назад\"\n                          className=\"icon\"\n                          onClick={() => {\n                            ws.close();\n                            setWs(null);\n                            setToUser(null);\n                          }\n                          }\n                      />\n                      <span>Чат с {toUser}</span>\n                    </>\n                ) : (\n                    <span>Ваши чаты</span>\n                )}\n                <img\n                    src={closeIcon}\n                    alt=\"Close chat\"\n                    className=\"icon\"\n                    onClick={() => setIsOpen(false)}\n                />\n              </div>\n\n              {!toUser ? (\n                  <>\n                    {/* Поле поиска */}\n                    <div className=\"search-field\">\n                      <input\n                          type=\"text\"\n                          placeholder=\"Поиск чатов...\"\n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                          className=\"search-input\"\n                      />\n                    </div>\n\n                    {/* Список чатов */}\n                    <div className=\"chat-list\">\n                      {conversations\n                          .filter((conversation) =>\n                              conversation.username\n                                  .toLowerCase()\n                                  .includes(searchQuery.toLowerCase())\n                          )\n                          .map((conversation, index) => (\n                              <div\n                                  key={index}\n                                  className=\"chat-item\"\n                                  onClick={() => {\n                                    console.log(\"set WebSocket\");\n                                    setToUser(conversation.username);\n                                    handleClickOnChat(conversation.username);\n                                  }\n                                  }\n                              >\n                                {conversation.username}\n                              </div>\n                          ))}\n                    </div>\n                  </>\n              ) : (\n                  <>\n                    {/* Переписка с выбранным собеседником */}\n                    <div className=\"chat-body\">\n                      {messages\n                          .map((msg, index) => (\n                              <div\n                                  key={index}\n                                  // className={`message-bubble ${\n                                  //   msg.type === 'sent' ? 'sent' : 'received'\n                                  // }`}\n                              >\n                                {msg && <p>{msg}</p>}\n                                {msg.timestamp && (\n                                    <span className=\"timestamp\">{msg.timestamp}</span>\n                                )}\n                              </div>\n                          ))}\n                    </div>\n\n                    {/* Поле ввода сообщения */}\n                    <div className=\"chat-input\">\n                      <input\n                          type=\"text\"\n                          placeholder=\"Введите сообщение\"\n                          value={inputValue}\n                          onChange={(e) => setInputValue(e.target.value)}\n                          className=\"input-with-emoji\"\n                      />\n                      <img\n                          src={stickerIcon}\n                          alt=\"Стикеры\"\n                          className=\"emoji-button\"\n                          onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n                      />\n                      {/*<button*/}\n                      {/*    className=\"emoji-button\"*/}\n                      {/*    onClick={() => setShowEmojiPicker(!showEmojiPicker)}*/}\n                      {/*>*/}\n                      {/*  😊*/}\n                      {/*</button>*/}\n                      {/*<button className=\"send-button\" onClick={handleSend}>*/}\n                      {/*  Отправить*/}\n                      {/*</button>*/}\n                      <img\n                          src={sendIcon}\n                          alt=\"Отправить\"\n                          className=\"send-button\"\n                          onClick={handleSend}\n                      />\n                      {showEmojiPicker && (\n                          <div className=\"emoji-picker\">\n                            {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n                                <button\n                                    key={index}\n                                    onClick={() => setInputValue(inputValue + emoji)}\n                                >\n                                  {emoji}\n                                </button>\n                            ))}\n                          </div>\n                      )}\n                    </div>\n                  </>\n              )}\n            </div>\n        )}\n      </div>\n  );\n};\n\nexport default Chat;\n\n\n// import React, { useState, useEffect } from 'react';\n// import './Chat.css';\n// import './ChatAuth.css'\n// import './Error.css'\n// import axios from 'axios'\n// import messageIcon from './chatIcons/ChatIcon.svg';\n// import closeIcon from './chatIcons/CloseIcon.svg';\n// import backArrow from './chatIcons/BackArrow.png'\n// import sendIcon from './chatIcons/SendIcon.svg';\n// import stickerIcon from './chatIcons/StickerIcon.svg';\n//\n// const Chat = () => {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const [inputValue, setInputValue] = useState('');\n//   const [file, setFile] = useState(null);\n//   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n//   const [ws, setWs] = useState(null);\n//\n//   const [error, setError] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [isRegistering, setIsRegistering] = useState(false);\n//   const [fromUser, setFromUser] = useState('');\n//   const [toUser, setToUser] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [password, setPassword] = useState('');\n//\n//   const [chats, setChats] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//\n//   // Отправка сообщения\n//   const handleSend = () => {\n//     if (inputValue.trim() || file) {\n//       const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n//       const messageData = {\n//         text: inputValue,\n//         file: file ? URL.createObjectURL(file) : null,\n//         type: 'sent',  // Тип сообщения 'sended' для отправленного\n//         timestamp\n//       };\n//\n//       // Отправка сообщения через WebSocket\n//       ws.send(JSON.stringify(messageData));\n//\n//       // Добавляем сообщение в локальное состояние\n//       setMessages((prevMessages) => [...prevMessages, messageData]);\n//       setInputValue('');\n//       setFile(null);\n//     }\n//   };\n//\n//   // Обработка получения сообщений через WebSocket\n//   useEffect(() => {\n//     if (ws) {\n//       ws.onmessage = (event) => {\n//         const data = JSON.parse(event.data);\n//         console.log(\"Message received:\", data);\n//\n//         // Добавляем полученное сообщение в локальное состояние с типом 'received'\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { ...data, type: 'received' }\n//         ]);\n//       };\n//     }\n//   }, [ws]);\n//\n//   // Логика для логина и регистрации не изменяется\n//   const handleLogin = async () => {\n//     if (fromUser && password) {\n//       try {\n//         let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n//         if (response.data.success) {\n//           setIsAuthenticated(true);\n//         } else {\n//           setError('Неверный логин или пароль');\n//         }\n//       } catch (error) {\n//         setError('Ошибка при авторизации');\n//       }\n//     } else {\n//       setError('Введите корректные данные для входа.');\n//     }\n//   };\n//\n//     const handleRegister = () => {\n//     // Mock registration logic; replace with API call if needed\n//     if (fromUser && password) {\n//       alert('Пользователь зарегистрирован!');\n//       setIsRegistering(false);\n//     } else {\n//       alert('Введите корректные данные для регистрации.');\n//     }\n//   };\n//\n//   const handleClickOnChat = async (toUser) => {\n//     const response = await axios.post('http://localhost:8000/chat/load/', { fromUser, toUser });\n//     console.log(response.data);\n//     setChats(response.data);\n//\n//     // Подключение к WebSocket\n//     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n//\n//     const waitForConnection = new Promise((resolve, reject) => {\n//       socket.onopen = () => resolve(socket);\n//       socket.onerror = (error) => reject(error);\n//     });\n//\n//     waitForConnection\n//       .then((connectedSocket) => {\n//         setWs(connectedSocket);\n//       })\n//       .catch((error) => {\n//         console.error(\"Failed to establish WebSocket connection:\", error);\n//       });\n//\n//     socket.onclose = () => {\n//       console.log('WebSocket connection closed');\n//     };\n//   };\n//\n//   // UI для аутентификации\n//   if (!isAuthenticated) {\n//     return (\n//       <div className=\"auth-container\">\n//         <div className=\"auth-box\">\n//           <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Логин\"\n//             value={fromUser}\n//             onChange={(e) => setFromUser(e.target.value)}\n//             className=\"auth-input\"\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"Пароль\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             className=\"auth-input\"\n//           />\n//           <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n//             {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n//           </button>\n//           <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n//             {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n//           </button>\n//\n//           {error && (\n//             <div className=\"auth-error\">\n//               <span>{error}</span>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     );\n//   }\n//\n//   return (\n//     <div>\n//       {!isOpen ? (\n//         <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n//           <div className=\"input-container\">\n//             Появились вопросы? Пишите нам!\n//             <div className=\"icon-container\">\n//               <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n//             </div>\n//           </div>\n//         </div>\n//       ) : (\n//         <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n//           <div className=\"chat-header\">\n//             <img\n//               src={backArrow}\n//               alt=\"Назад\"\n//               className=\"icon\"\n//               onClick={() => {\n//                 ws.close();\n//                 setWs(null);\n//                 setToUser(null);\n//               }}\n//             />\n//             <span>Чат с {toUser}</span>\n//             <img\n//               src={closeIcon}\n//               alt=\"Close chat\"\n//               className=\"icon\"\n//               onClick={() => setIsOpen(false)}\n//             />\n//           </div>\n//\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div\n//                 key={index}\n//                 className={`message-bubble ${msg.type === 'sent' ? 'sent' : 'received'}`}\n//               >\n//                 <p>{msg.text}</p>\n//                 <span className=\"timestamp\">{msg.timestamp}</span>\n//               </div>\n//             ))}\n//           </div>\n//\n//           <div className=\"chat-input\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Введите сообщение\"\n//               value={inputValue}\n//               onChange={(e) => setInputValue(e.target.value)}\n//               className=\"input-with-emoji\"\n//             />\n//             <img\n//               src={stickerIcon}\n//               alt=\"Стикеры\"\n//               className=\"emoji-button\"\n//               onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n//             />\n//             <img\n//               src={sendIcon}\n//               alt=\"Отправить\"\n//               className=\"send-button\"\n//               onClick={handleSend}\n//             />\n//             {showEmojiPicker && (\n//               <div className=\"emoji-picker\">\n//                 {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n//                   <button\n//                     key={index}\n//                     onClick={() => setInputValue(inputValue + emoji)}\n//                   >\n//                     {emoji}\n//                   </button>\n//                 ))}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n//\n// export default Chat;\nconsole.log(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}