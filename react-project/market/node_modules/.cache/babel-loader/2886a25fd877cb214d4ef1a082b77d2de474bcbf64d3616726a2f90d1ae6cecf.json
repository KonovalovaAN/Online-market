{"ast":null,"code":"var _jsxFileName = \"/home/plotvichka_2/bsu/3_course/TP/Online-market/react-project/market/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport './ChatAuth.css';\nimport './Error.css';\nimport axios from 'axios';\nimport messageIcon from './chatIcons/ChatIcon.svg';\nimport closeIcon from './chatIcons/CloseIcon.svg';\nimport backArrow from './chatIcons/BackArrow.png';\nimport sendIcon from './chatIcons/SendIcon.svg';\nimport searchIcon from './chatIcons/SearchIcon.svg';\nimport clipIcon from './chatIcons/ClipIcon.svg';\nimport stickerIcon from './chatIcons/StickerIcon.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [file, setFile] = useState(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [ws, setWs] = useState(null);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n  const [isRegistering, setIsRegistering] = useState(false); // Registration state\n  const [fromUser, setFromUser] = useState('');\n  const [toUser, setToUser] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [password, setPassword] = useState('');\n  const [chats, setChats] = useState([]); // Все чаты\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Запрос поиска\n  // const [selectedChat, setSelectedChat] = useState(null); // Текущий выбранный чат\n\n  // useEffect(() => {\n  //   console.log(\"using useEffect\")\n  //   console.log(new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit'}));\n  //   const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/`);\n  //   socket.onopen = () => console.log('WebSocket connected');\n  //   socket.onmessage = (event) => {\n  //     const data = JSON.parse(event.data);\n  //     console.log(data)\n  //     // setMessages((prev) => [...prev, data]);\n  //     // setMessages([data])\n  //   };\n  //   socket.onerror = (error) => console.error('WebSocket Error:', error);\n  //   socket.onclose = () => console.log('WebSocket connection closed');\n  //   setWs(socket);\n  //\n  //   return () => {\n  //     socket.close();\n  //   };\n  // }, [fromUser]);\n\n  // const handleSend = () => {\n  //   if (inputValue.trim() || file) {\n  //     console.log(\"sending message..\")\n  //     const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  //     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${username}/${selectedChat.username}/`);\n  //     socket.onopen = () => {\n  //       console.log('WebSocket connected');\n  //       console.log(\"before send\")\n  //       ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n  //       console.log(\"after send\")\n  //     }\n  //     socket.onmessage = (event) => {\n  //       const data = JSON.parse(event.data);\n  //       selectedChat.messages = [selectedChat.messages, data.message]\n  //       console.log(selectedChat)\n  //       // setMessages((prev) => [...prev, data]);\n  //       // setMessages([data])\n  //     };\n  //     socket.onerror = (error) => console.error('WebSocket Error:', error);\n  //     socket.onclose = () => console.log('WebSocket connection closed');\n  //     setWs(socket)\n  //   // return () => {\n  //   //   socket.close();\n  //   // };\n  //   //   if (ws) {\n  //   //     ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n  //   //   }\n  //     setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n  //     setInputValue('');\n  //     setFile(null);\n  //     console.log(\"end sending...\")\n  //   }\n  // };\n\n  const handleSend = () => {\n    if (inputValue.trim() || file) {\n      const timestamp = new Date().toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      if (ws) {\n        console.log(\"ws exists\");\n        console.log(ws);\n        const messageData = JSON.stringify({\n          text: inputValue,\n          file: file ? URL.createObjectURL(file) : null,\n          timestamp\n        });\n        ws.send(messageData);\n        console.log(\"Message sent:\", messageData);\n\n        // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n        setInputValue('');\n        setFile(null);\n      } else {\n        console.log(\"Initializing WebSocket...\");\n        const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n\n        // Создаем Promise для ожидания успешного подключения WebSocket\n        const waitForConnection = new Promise((resolve, reject) => {\n          socket.onopen = () => {\n            console.log('WebSocket connected');\n            resolve(socket);\n          };\n          socket.onerror = error => {\n            console.error('WebSocket Error:', error);\n            reject(error);\n          };\n        });\n        waitForConnection.then(connectedSocket => {\n          console.log(\"WebSocket ready to send message\");\n          const messageData = JSON.stringify({\n            text: inputValue,\n            file: file ? URL.createObjectURL(file) : null,\n            timestamp\n          });\n          connectedSocket.send(messageData);\n          console.log(\"Message sent:\", messageData);\n\n          // Сохраняем WebSocket в состоянии, чтобы поддерживать связь\n          setWs(connectedSocket);\n\n          // Обновляем список сообщений\n          // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n          setInputValue('');\n          setFile(null);\n        }).catch(error => {\n          console.error(\"Failed to establish WebSocket connection:\", error);\n        });\n\n        // Обработка сообщений и закрытия WebSocket\n        socket.onmessage = event => {\n          const data = JSON.parse(event.data);\n          console.log(\"Message received:\", data);\n          setMessages(prevMessages => [...prevMessages,\n          // { text: data.message, type: 'received', timestamp: data.timestamp },\n          data.message]);\n          // console.log(selectedChat.messages)\n          // selectedChat.messages = selectedChat.messages + data.message\n          // console.log(selectedChat.messages)\n          // console.log(selectedChat)\n        };\n        socket.onclose = () => {\n          console.log('WebSocket connection closed');\n        };\n      }\n    }\n  };\n  const handleLogin = async () => {\n    if (fromUser && password) {\n      // setIsAuthenticated(true);\n      try {\n        let response = await axios.post('http://localhost:8000/chat/login/', {\n          fromUser,\n          password\n        });\n        if (response.data.success) {\n          setIsAuthenticated(true);\n          response = await axios.post('http://localhost:8000/chat/load/', {\n            fromUser\n          });\n          console.log(response);\n          console.log(response.data);\n\n          // console.log(response.data.alina)\n          setChats(response.data);\n        } else {\n          setError('Неверный логин или пароль');\n        }\n      } catch (error) {\n        setError('Ошибка при авторизации');\n      }\n    } else {\n      setError('Введите корректные данные для входа.');\n    }\n  };\n  const handleRegister = () => {\n    // Mock registration logic; replace with API call if needed\n    if (fromUser && password) {\n      alert('Пользователь зарегистрирован!');\n      setIsRegistering(false);\n    } else {\n      alert('Введите корректные данные для регистрации.');\n    }\n  };\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isRegistering ? 'Регистрация' : 'Вход'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n          value: fromUser,\n          onChange: e => setFromUser(e.target.value),\n          className: \"auth-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"auth-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: isRegistering ? handleRegister : handleLogin,\n          className: \"auth-button\",\n          children: isRegistering ? 'Зарегистрироваться' : 'Войти'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsRegistering(!isRegistering),\n          className: \"toggle-button\",\n          children: isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 9\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/path/to/error-icon.svg\",\n            alt: \"Error\",\n            className: \"error-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      onClick: () => setIsOpen(true),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [\"\\u041F\\u043E\\u044F\\u0432\\u0438\\u043B\\u0438\\u0441\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B? \\u041F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u043D\\u0430\\u043C!\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: messageIcon,\n            alt: \"Message icon\",\n            className: \"icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-window ${isOpen ? 'open' : 'close'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [toUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: backArrow,\n            alt: \"\\u041D\\u0430\\u0437\\u0430\\u0434\",\n            className: \"icon\",\n            onClick: () => {\n              ws.close();\n              setToUser(null);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"\\u0427\\u0430\\u0442 \\u0441 \", toUser]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u0412\\u0430\\u0448\\u0438 \\u0447\\u0430\\u0442\\u044B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: closeIcon,\n          alt: \"Close chat\",\n          className: \"icon\",\n          onClick: () => setIsOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), !toUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-field\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0447\\u0430\\u0442\\u043E\\u0432...\",\n            value: searchQuery,\n            onChange: e => setSearchQuery(e.target.value),\n            className: \"search-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-list\",\n          children: chats.filter(chat => chat.username.toLowerCase().includes(searchQuery.toLowerCase())).map((chat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-item\",\n            onClick: () => {\n              console.log(chat);\n              console.log(\"aaaaaaaaaaaaaaaaaaa\");\n              setToUser(chat.username);\n              setMessages(chat.messages);\n            },\n            children: chat.username\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-body\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [msg && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 31\n            }, this), msg.timestamp && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"timestamp\",\n              children: msg.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 25\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n            value: inputValue,\n            onChange: e => setInputValue(e.target.value),\n            className: \"input-with-emoji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: stickerIcon,\n            alt: \"\\u0421\\u0442\\u0438\\u043A\\u0435\\u0440\\u044B\",\n            className: \"emoji-button\",\n            onClick: () => setShowEmojiPicker(!showEmojiPicker)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: sendIcon,\n            alt: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n            className: \"send-button\",\n            onClick: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 17\n          }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"emoji-picker\",\n            children: ['😊', '😂', '😍', '😎'].map((emoji, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setInputValue(inputValue + emoji),\n              children: emoji\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 27\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"kDVYcSXalz/9ZvOY05uaq36onro=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","axios","messageIcon","closeIcon","backArrow","sendIcon","searchIcon","clipIcon","stickerIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","isOpen","setIsOpen","inputValue","setInputValue","file","setFile","showEmojiPicker","setShowEmojiPicker","ws","setWs","error","setError","isAuthenticated","setIsAuthenticated","isRegistering","setIsRegistering","fromUser","setFromUser","toUser","setToUser","messages","setMessages","password","setPassword","chats","setChats","searchQuery","setSearchQuery","handleSend","trim","timestamp","Date","toLocaleTimeString","hour","minute","console","log","messageData","JSON","stringify","text","URL","createObjectURL","send","socket","WebSocket","waitForConnection","Promise","resolve","reject","onopen","onerror","then","connectedSocket","catch","onmessage","event","data","parse","prevMessages","message","onclose","handleLogin","response","post","success","handleRegister","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","src","alt","close","filter","chat","username","toLowerCase","includes","map","index","msg","emoji","_c","$RefreshReg$"],"sources":["/home/plotvichka_2/bsu/3_course/TP/Online-market/react-project/market/src/components/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport './ChatAuth.css'\nimport './Error.css'\nimport axios from 'axios'\nimport messageIcon from './chatIcons/ChatIcon.svg';\nimport closeIcon from './chatIcons/CloseIcon.svg';\nimport backArrow from './chatIcons/BackArrow.png'\nimport sendIcon from './chatIcons/SendIcon.svg';\nimport searchIcon from './chatIcons/SearchIcon.svg';\nimport clipIcon from './chatIcons/ClipIcon.svg';\nimport stickerIcon from './chatIcons/StickerIcon.svg';\n\nconst Chat = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [file, setFile] = useState(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [ws, setWs] = useState(null);\n\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n  const [isRegistering, setIsRegistering] = useState(false); // Registration state\n  const [fromUser, setFromUser] = useState('');\n  const [toUser, setToUser] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [password, setPassword] = useState('');\n\n  const [chats, setChats] = useState([]); // Все чаты\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Запрос поиска\n  // const [selectedChat, setSelectedChat] = useState(null); // Текущий выбранный чат\n\n\n  // useEffect(() => {\n  //   console.log(\"using useEffect\")\n  //   console.log(new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit'}));\n  //   const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/`);\n  //   socket.onopen = () => console.log('WebSocket connected');\n  //   socket.onmessage = (event) => {\n  //     const data = JSON.parse(event.data);\n  //     console.log(data)\n  //     // setMessages((prev) => [...prev, data]);\n  //     // setMessages([data])\n  //   };\n  //   socket.onerror = (error) => console.error('WebSocket Error:', error);\n  //   socket.onclose = () => console.log('WebSocket connection closed');\n  //   setWs(socket);\n  //\n  //   return () => {\n  //     socket.close();\n  //   };\n  // }, [fromUser]);\n\n    // const handleSend = () => {\n    //   if (inputValue.trim() || file) {\n    //     console.log(\"sending message..\")\n    //     const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    //     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${username}/${selectedChat.username}/`);\n    //     socket.onopen = () => {\n    //       console.log('WebSocket connected');\n    //       console.log(\"before send\")\n    //       ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n    //       console.log(\"after send\")\n    //     }\n    //     socket.onmessage = (event) => {\n    //       const data = JSON.parse(event.data);\n    //       selectedChat.messages = [selectedChat.messages, data.message]\n    //       console.log(selectedChat)\n    //       // setMessages((prev) => [...prev, data]);\n    //       // setMessages([data])\n    //     };\n    //     socket.onerror = (error) => console.error('WebSocket Error:', error);\n    //     socket.onclose = () => console.log('WebSocket connection closed');\n    //     setWs(socket)\n    //   // return () => {\n    //   //   socket.close();\n    //   // };\n    //   //   if (ws) {\n    //   //     ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n    //   //   }\n    //     setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n    //     setInputValue('');\n    //     setFile(null);\n    //     console.log(\"end sending...\")\n    //   }\n    // };\n\n  const handleSend = () => {\n  if (inputValue.trim() || file) {\n    const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n    if (ws) {\n      console.log(\"ws exists\")\n      console.log(ws)\n      const messageData = JSON.stringify({\n              text: inputValue,\n              file: file ? URL.createObjectURL(file) : null,\n              timestamp,\n            });\n\n            ws.send(messageData);\n            console.log(\"Message sent:\", messageData);\n\n            // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n            setInputValue('');\n            setFile(null);\n    } else {\n      console.log(\"Initializing WebSocket...\");\n      const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n\n      // Создаем Promise для ожидания успешного подключения WebSocket\n      const waitForConnection = new Promise((resolve, reject) => {\n        socket.onopen = () => {\n          console.log('WebSocket connected');\n          resolve(socket);\n        };\n        socket.onerror = (error) => {\n          console.error('WebSocket Error:', error);\n          reject(error);\n        };\n      });\n\n      waitForConnection\n          .then((connectedSocket) => {\n            console.log(\"WebSocket ready to send message\");\n            const messageData = JSON.stringify({\n              text: inputValue,\n              file: file ? URL.createObjectURL(file) : null,\n              timestamp,\n            });\n\n            connectedSocket.send(messageData);\n            console.log(\"Message sent:\", messageData);\n\n            // Сохраняем WebSocket в состоянии, чтобы поддерживать связь\n            setWs(connectedSocket);\n\n            // Обновляем список сообщений\n            // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n            setInputValue('');\n            setFile(null);\n          })\n          .catch((error) => {\n            console.error(\"Failed to establish WebSocket connection:\", error);\n          });\n\n      // Обработка сообщений и закрытия WebSocket\n      socket.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        console.log(\"Message received:\", data);\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          // { text: data.message, type: 'received', timestamp: data.timestamp },\n          data.message\n        ]);\n        // console.log(selectedChat.messages)\n        // selectedChat.messages = selectedChat.messages + data.message\n        // console.log(selectedChat.messages)\n        // console.log(selectedChat)\n      }\n\n      socket.onclose = () => {\n        console.log('WebSocket connection closed');\n      };\n    }\n  }\n};\n\n\n  const handleLogin = async () => {\n  if (fromUser && password) {\n    // setIsAuthenticated(true);\n    try {\n      let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n      if (response.data.success) {\n        setIsAuthenticated(true);\n        response = await axios.post('http://localhost:8000/chat/load/', { fromUser });\n        console.log(response)\n        console.log(response.data)\n\n        // console.log(response.data.alina)\n        setChats(response.data)\n      } else {\n        setError('Неверный логин или пароль');\n      }\n    } catch (error) {\n      setError('Ошибка при авторизации');\n    }\n  } else {\n    setError('Введите корректные данные для входа.');\n  }\n};\n\n\n  const handleRegister = () => {\n    // Mock registration logic; replace with API call if needed\n    if (fromUser && password) {\n      alert('Пользователь зарегистрирован!');\n      setIsRegistering(false);\n    } else {\n      alert('Введите корректные данные для регистрации.');\n    }\n  };\n\n  if (!isAuthenticated) {\n  return (\n    <div className=\"auth-container\">\n      <div className=\"auth-box\">\n        <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Логин\"\n          value={fromUser}\n          onChange={(e) => setFromUser(e.target.value)}\n          className=\"auth-input\"\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Пароль\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className=\"auth-input\"\n        />\n        <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n          {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n        </button>\n        <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n          {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n        </button>\n\n        {/* Отображение ошибки */}\n        {error && (\n  <div className=\"auth-error\">\n    <img src=\"/path/to/error-icon.svg\" alt=\"Error\" className=\"error-icon\" />\n    <span>{error}</span>\n  </div>\n)}\n      </div>\n    </div>\n  );\n}\n\n\n\n  return (\n    <div>\n      {!isOpen ? (\n        <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n          <div className=\"input-container\">\n            Появились вопросы? Пишите нам!\n            <div className=\"icon-container\">\n              <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n          <div className=\"chat-header\">\n            {toUser ? (\n                <>\n                  {/*<button*/}\n                  {/*    className=\"back-button\"*/}\n                  {/*    onClick={() => setSelectedChat(null)}*/}\n                  {/*>*/}\n                  {/*  ← Назад*/}\n                  {/*</button>*/}\n                  <img\n                      src={backArrow}\n                      alt=\"Назад\"\n                      className=\"icon\"\n                      onClick={() => {\n                          ws.close();\n                          setToUser(null);\n                        }\n                      }\n                  />\n                  <span>Чат с {toUser}</span>\n                </>\n            ) : (\n                <span>Ваши чаты</span>\n            )}\n            <img\n                src={closeIcon}\n                alt=\"Close chat\"\n                className=\"icon\"\n              onClick={() => setIsOpen(false)}\n            />\n          </div>\n\n          {!toUser ? (\n            <>\n              {/* Поле поиска */}\n              <div className=\"search-field\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Поиск чатов...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"search-input\"\n                />\n              </div>\n\n              {/* Список чатов */}\n              <div className=\"chat-list\">\n                {chats\n                  .filter((chat) =>\n                    chat.username\n                      .toLowerCase()\n                      .includes(searchQuery.toLowerCase())\n                  )\n                  .map((chat, index) => (\n                    <div\n                      key={index}\n                      className=\"chat-item\"\n                      onClick={() => {\n                          console.log(chat);\n                          console.log(\"aaaaaaaaaaaaaaaaaaa\")\n                      setToUser(chat.username);\n                      setMessages(chat.messages);}}\n                    >\n                      {chat.username}\n                    </div>\n                  ))}\n              </div>\n            </>\n          ) : (\n            <>\n              {/* Переписка с выбранным собеседником */}\n              <div className=\"chat-body\">\n                {messages\n                  .map((msg, index) => (\n                    <div\n                      key={index}\n                      // className={`message-bubble ${\n                      //   msg.type === 'sent' ? 'sent' : 'received'\n                      // }`}\n                    >\n                      {msg && <p>{msg}</p>}\n                      {msg.timestamp && (\n                        <span className=\"timestamp\">{msg.timestamp}</span>\n                      )}\n                    </div>\n                  ))}\n              </div>\n\n              {/* Поле ввода сообщения */}\n              <div className=\"chat-input\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Введите сообщение\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    className=\"input-with-emoji\"\n                />\n                <img\n                    src={stickerIcon}\n                    alt=\"Стикеры\"\n                    className=\"emoji-button\"\n                    onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n                />\n                {/*<button*/}\n                {/*    className=\"emoji-button\"*/}\n                {/*    onClick={() => setShowEmojiPicker(!showEmojiPicker)}*/}\n                {/*>*/}\n                {/*  😊*/}\n                {/*</button>*/}\n                {/*<button className=\"send-button\" onClick={handleSend}>*/}\n                {/*  Отправить*/}\n                {/*</button>*/}\n                <img\n                    src={sendIcon}\n                    alt=\"Отправить\"\n                    className=\"send-button\"\n                    onClick={handleSend}\n                />\n                {showEmojiPicker && (\n                    <div className=\"emoji-picker\">\n                      {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n                          <button\n                              key={index}\n                              onClick={() => setInputValue(inputValue + emoji)}\n                          >\n                            {emoji}\n                          </button>\n                      ))}\n                    </div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}