{"ast":null,"code":"var _jsxFileName = \"/home/plotvichka_2/bsu/3_course/TP/Online-market/react-project/market/src/components/Chat.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './Chat.css';\n// import './ChatAuth.css'\n// import './Error.css'\n// import axios from 'axios'\n// import messageIcon from './chatIcons/ChatIcon.svg';\n// import closeIcon from './chatIcons/CloseIcon.svg';\n// import backArrow from './chatIcons/BackArrow.png'\n// import sendIcon from './chatIcons/SendIcon.svg';\n// import searchIcon from './chatIcons/SearchIcon.svg';\n// import clipIcon from './chatIcons/ClipIcon.svg';\n// import stickerIcon from './chatIcons/StickerIcon.svg';\n//\n// const Chat = () => {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const [inputValue, setInputValue] = useState('');\n//   const [file, setFile] = useState(null);\n//   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n//   const [ws, setWs] = useState(null);\n//\n//   const [error, setError] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n//   const [isRegistering, setIsRegistering] = useState(false); // Registration state\n//   const [fromUser, setFromUser] = useState('');\n//   const [toUser, setToUser] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [password, setPassword] = useState('');\n//\n//   const [searchQuery, setSearchQuery] = useState(\"\"); // Запрос поиска\n//   const [conversations, setConversations] = useState([])\n//\n//\n//   // useEffect(() => {\n//   //   console.log(\"using useEffect\")\n//   //   console.log(new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit'}));\n//   //   const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/`);\n//   //   socket.onopen = () => console.log('WebSocket connected');\n//   //   socket.onmessage = (event) => {\n//   //     const data = JSON.parse(event.data);\n//   //     console.log(data)\n//   //     // setMessages((prev) => [...prev, data]);\n//   //     // setMessages([data])\n//   //   };\n//   //   socket.onerror = (error) => console.error('WebSocket Error:', error);\n//   //   socket.onclose = () => console.log('WebSocket connection closed');\n//   //   setWs(socket);\n//   //\n//   //   return () => {\n//   //     socket.close();\n//   //   };\n//   // }, [fromUser]);\n//\n//     // const handleSend = () => {\n//     //   if (inputValue.trim() || file) {\n//     //     console.log(\"sending message..\")\n//     //     const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n//     //     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${username}/${selectedChat.username}/`);\n//     //     socket.onopen = () => {\n//     //       console.log('WebSocket connected');\n//     //       console.log(\"before send\")\n//     //       ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n//     //       console.log(\"after send\")\n//     //     }\n//     //     socket.onmessage = (event) => {\n//     //       const data = JSON.parse(event.data);\n//     //       selectedChat.messages = [selectedChat.messages, data.message]\n//     //       console.log(selectedChat)\n//     //       // setMessages((prev) => [...prev, data]);\n//     //       // setMessages([data])\n//     //     };\n//     //     socket.onerror = (error) => console.error('WebSocket Error:', error);\n//     //     socket.onclose = () => console.log('WebSocket connection closed');\n//     //     setWs(socket)\n//     //   // return () => {\n//     //   //   socket.close();\n//     //   // };\n//     //   //   if (ws) {\n//     //   //     ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n//     //   //   }\n//     //     setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n//     //     setInputValue('');\n//     //     setFile(null);\n//     //     console.log(\"end sending...\")\n//     //   }\n//     // };\n//\n//   const handleSend = () => {\n//   if (inputValue.trim() || file) {\n//     const timestamp = new Date().toISOString();\n//       const messageData = JSON.stringify({\n//               text: inputValue,\n//               file: file ? URL.createObjectURL(file) : null,\n//               timestamp,\n//             });\n//\n//             ws.send(messageData);\n//             console.log(\"Message sent:\", messageData);\n//\n//             // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n//             setInputValue('');\n//             setFile(null);\n//   }\n// };\n//\n//\n//   const handleLogin = async () => {\n//   if (fromUser && password) {\n//     // setIsAuthenticated(true);\n//     try {\n//       let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n//       if (response.data.success) {\n//         setIsAuthenticated(true);\n//       } else {\n//         setError('Неверный логин или пароль');\n//       }\n//     } catch (error) {\n//       setError('Ошибка при авторизации');\n//     }\n//   } else {\n//     setError('Введите корректные данные для входа.');\n//   }\n// };\n//\n//   const handleClickOnChat = async (toUser) => {\n//     const response = await axios.post('http://localhost:8000/chat/load/messages/', { fromUser, toUser });\n//     console.log(response)\n//     console.log(response.data)\n//     setMessages(response.data)\n//     console.log(\"Messages set\")\n//\n//     // console.log(response.data.alina)\n//     console.log(\"Initializing WebSocket...\");\n//     console.log(`${toUser}`)\n//     console.log(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`)\n//     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n//\n//     // Создаем Promise для ожидания успешного подключения WebSocket\n//     const waitForConnection = new Promise((resolve, reject) => {\n//       socket.onopen = () => {\n//         console.log('WebSocket connected');\n//         resolve(socket);\n//       };\n//       socket.onerror = (error) => {\n//         console.error('WebSocket Error:', error);\n//         reject(error);\n//       };\n//     });\n//\n//     waitForConnection\n//         .then((connectedSocket) => {\n//           setWs(connectedSocket);\n//         })\n//         .catch((error) => {\n//           console.error(\"Failed to establish WebSocket connection:\", error);\n//         });\n//\n//     // socket.onmessage = (event) => {\n//     //   const data = JSON.parse(event.data);\n//     //   console.log(\"Message received:\", data);\n//     //   console.log(messages)\n//     //   setMessages((prevMessages) => [\n//     //     ...prevMessages,\n//     //     // { text: data.message, type: 'received', timestamp: data.timestamp },\n//     //     data.message\n//     //   ]);\n//     //   console.log(messages)\n//     // }\n//     socket.onmessage = (event) => {\n//       const data = JSON.parse(event.data);\n//       console.log(\"Message received:\", data);\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         // { text: data.message, type: 'sent', timestamp: data.timestamp }\n//           data\n//       ]);\n//       console.log(data.timestamp)\n//     };\n//\n//     socket.onclose = () => {\n//       console.log('WebSocket connection closed');\n//     };\n//   }\n//\n//\n//   const handleRegister = () => {\n//     // Mock registration logic; replace with API call if needed\n//     if (fromUser && password) {\n//       alert('Пользователь зарегистрирован!');\n//       setIsRegistering(false);\n//     } else {\n//       alert('Введите корректные данные для регистрации.');\n//     }\n//   };\n//\n//   const loadConversations = async () => {\n//     console.log(\"load conversations\")\n//     const response = await axios.post('http://localhost:8000/chat/load/conversations/', { fromUser });\n//     console.log(response)\n//     console.log(response.data)\n//     setConversations(response.data)\n//   }\n//\n//   if (!isAuthenticated) {\n//     return (\n//         <div className=\"auth-container\">\n//           <div className=\"auth-box\">\n//             <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Логин\"\n//                 value={fromUser}\n//                 onChange={(e) => setFromUser(e.target.value)}\n//                 className=\"auth-input\"\n//             />\n//             <input\n//                 type=\"password\"\n//                 placeholder=\"Пароль\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//                 className=\"auth-input\"\n//             />\n//             <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n//               {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n//             </button>\n//             <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n//               {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n//             </button>\n//\n//             {/* Отображение ошибки */}\n//             {error && (\n//                 <div className=\"auth-error\">\n//                   <img src=\"/path/to/error-icon.svg\" alt=\"Error\" className=\"error-icon\" />\n//                   <span>{error}</span>\n//                 </div>\n//             )}\n//           </div>\n//         </div>\n//     );\n//   }\n//\n//\n//\n//   return (\n//       <div>\n//         {!isOpen ? (\n//             <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n//               <div className=\"input-container\"\n//                    onClick={() => loadConversations()}\n//               >\n//                 Появились вопросы? Пишите нам!\n//                 <div className=\"icon-container\">\n//                   <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n//                 </div>\n//               </div>\n//             </div>\n//         ) : (\n//             <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n//               <div className=\"chat-header\">\n//                 {toUser ? (\n//                     <>\n//                       {/*<button*/}\n//                       {/*    className=\"back-button\"*/}\n//                       {/*    onClick={() => setSelectedChat(null)}*/}\n//                       {/*>*/}\n//                       {/*  ← Назад*/}\n//                       {/*</button>*/}\n//                       <img\n//                           src={backArrow}\n//                           alt=\"Назад\"\n//                           className=\"icon\"\n//                           onClick={() => {\n//                             ws.close();\n//                             setWs(null);\n//                             setToUser(null);\n//                           }\n//                           }\n//                       />\n//                       <span>Чат с {toUser}</span>\n//                     </>\n//                 ) : (\n//                     <span>Ваши чаты</span>\n//                 )}\n//                 <img\n//                     src={closeIcon}\n//                     alt=\"Close chat\"\n//                     className=\"icon\"\n//                     onClick={() => setIsOpen(false)}\n//                 />\n//               </div>\n//\n//               {!toUser ? (\n//                   <>\n//                     {/* Поле поиска */}\n//                     <div className=\"search-field\">\n//                       <input\n//                           type=\"text\"\n//                           placeholder=\"Поиск чатов...\"\n//                           value={searchQuery}\n//                           onChange={(e) => setSearchQuery(e.target.value)}\n//                           className=\"search-input\"\n//                       />\n//                     </div>\n//\n//                     {/* Список чатов */}\n//                     <div className=\"chat-list\">\n//                       {conversations\n//                           .filter((conversation) =>\n//                               conversation.username\n//                                   .toLowerCase()\n//                                   .includes(searchQuery.toLowerCase())\n//                           )\n//                           .map((conversation, index) => (\n//                               <div\n//                                   key={index}\n//                                   className=\"chat-item\"\n//                                   onClick={() => {\n//                                     console.log(\"set WebSocket\");\n//                                     setToUser(conversation.username);\n//                                     handleClickOnChat(conversation.username);\n//                                   }\n//                                   }\n//                               >\n//                                 {conversation.username}\n//                               </div>\n//                           ))}\n//                     </div>\n//                   </>\n//               ) : (\n//                   <>\n//                     {/* Переписка с выбранным собеседником */}\n//                     <div className=\"chat-body\">\n//                       {messages.map((msg, index) => (\n//                           <div\n//                               key={index}\n//                               className={`message-bubble ${msg.type === 'sent' ? 'sent' : 'received'}`}\n//                           >\n//                             {msg.text && <p>{msg.text}</p>}\n//                             {msg.timestamp && (\n//                                 <span className=\"timestamp\">\n//                                   {new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})}\n//                                 </span>\n//                             )}\n//                           </div>\n//                       ))}\n//                     </div>\n//\n//\n//                     {/* Поле ввода сообщения */}\n//                     <div className=\"chat-input\">\n//                       <input\n//                           type=\"text\"\n//                           placeholder=\"Введите сообщение\"\n//                           value={inputValue}\n//                           onChange={(e) => setInputValue(e.target.value)}\n//                           className=\"input-with-emoji\"\n//                       />\n//                       <img\n//                           src={stickerIcon}\n//                           alt=\"Стикеры\"\n//                           className=\"emoji-button\"\n//                           onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n//                       />\n//                       {/*<button*/}\n//                       {/*    className=\"emoji-button\"*/}\n//                       {/*    onClick={() => setShowEmojiPicker(!showEmojiPicker)}*/}\n//                       {/*>*/}\n//                       {/*  😊*/}\n//                       {/*</button>*/}\n//                       {/*<button className=\"send-button\" onClick={handleSend}>*/}\n//                       {/*  Отправить*/}\n//                       {/*</button>*/}\n//                       <img\n//                           src={sendIcon}\n//                           alt=\"Отправить\"\n//                           className=\"send-button\"\n//                           onClick={handleSend}\n//                       />\n//                       {showEmojiPicker && (\n//                           <div className=\"emoji-picker\">\n//                             {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n//                                 <button\n//                                     key={index}\n//                                     onClick={() => setInputValue(inputValue + emoji)}\n//                                 >\n//                                   {emoji}\n//                                 </button>\n//                             ))}\n//                           </div>\n//                       )}\n//                     </div>\n//                   </>\n//               )}\n//             </div>\n//         )}\n//       </div>\n//   );\n// };\n//\n// export default Chat;\n\nimport React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport './ChatAuth.css';\nimport './Error.css';\nimport axios from 'axios';\nimport messageIcon from './chatIcons/ChatIcon.svg';\nimport closeIcon from './chatIcons/CloseIcon.svg';\nimport backArrow from './chatIcons/BackArrow.png';\nimport sendIcon from './chatIcons/SendIcon.svg';\nimport searchIcon from './chatIcons/SearchIcon.svg';\nimport clipIcon from './chatIcons/ClipIcon.svg';\nimport stickerIcon from './chatIcons/StickerIcon.svg';\nimport plusIcon from './chatIcons/PlusIcon1.png'; // Add a plus icon for creating new chats\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [file, setFile] = useState(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [ws, setWs] = useState(null);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n  const [isRegistering, setIsRegistering] = useState(false); // Registration state\n  const [fromUser, setFromUser] = useState('');\n  const [toUser, setToUser] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [password, setPassword] = useState('');\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Search query\n  const [conversations, setConversations] = useState([]);\n  const [showNewChatInput, setShowNewChatInput] = useState(false); // Control visibility of input field\n  const [newChatUsername, setNewChatUsername] = useState(''); // Store new chat username\n\n  // Fetch conversations after login\n  const loadConversations = async () => {\n    const response = await axios.post('http://localhost:8000/chat/load/conversations/', {\n      fromUser\n    });\n    setConversations(response.data);\n  };\n  const handleNewChatSubmit = async () => {\n    if (newChatUsername) {\n      try {\n        const response = await axios.post('http://localhost:8000/chat/check_user/', {\n          username: newChatUsername\n        });\n        if (response.data.exists) {\n          // Create a new chat with the user\n          setToUser(newChatUsername);\n          handleClickOnChat(newChatUsername);\n          setShowNewChatInput(false);\n        } else {\n          setError('Пользователь не найден');\n        }\n      } catch (error) {\n        setError('Ошибка при создании чата');\n      }\n    }\n  };\n  const handleNewChatKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleNewChatSubmit();\n    }\n  };\n  const handleSend = () => {\n    if (inputValue.trim() || file) {\n      const timestamp = new Date().toISOString();\n      const messageData = JSON.stringify({\n        text: inputValue,\n        file: file ? URL.createObjectURL(file) : null,\n        timestamp\n      });\n      ws.send(messageData);\n      console.log(\"Message sent:\", messageData);\n\n      // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n      setInputValue('');\n      setFile(null);\n    }\n  };\n  const handleClickOnChat = async toUser => {\n    const response = await axios.post('http://localhost:8000/chat/load/messages/', {\n      fromUser,\n      toUser\n    });\n    setMessages(response.data);\n    const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n    socket.onopen = () => {\n      console.log('WebSocket connected');\n    };\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, data]);\n    };\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n    setWs(socket);\n  };\n  const handleRegister = () => {\n    // Mock registration logic; replace with API call if needed\n    if (fromUser && password) {\n      alert('Пользователь зарегистрирован!');\n      setIsRegistering(false);\n    } else {\n      alert('Введите корректные данные для регистрации.');\n    }\n  };\n  const handleLogin = async () => {\n    if (fromUser && password) {\n      try {\n        let response = await axios.post('http://localhost:8000/chat/login/', {\n          fromUser,\n          password\n        });\n        if (response.data.success) {\n          setIsAuthenticated(true);\n          loadConversations();\n        } else {\n          setError('Неверный логин или пароль');\n        }\n      } catch (error) {\n        setError('Ошибка при авторизации');\n      }\n    } else {\n      setError('Введите корректные данные для входа.');\n    }\n  };\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isRegistering ? 'Регистрация' : 'Вход'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n          value: fromUser,\n          onChange: e => setFromUser(e.target.value),\n          className: \"auth-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"auth-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: isRegistering ? handleRegister : handleLogin,\n          className: \"auth-button\",\n          children: isRegistering ? 'Зарегистрироваться' : 'Войти'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsRegistering(!isRegistering),\n          className: \"toggle-button\",\n          children: isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/path/to/error-icon.svg\",\n            alt: \"Error\",\n            className: \"error-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      onClick: () => setIsOpen(true),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        onClick: () => loadConversations(),\n        children: [\"\\u041F\\u043E\\u044F\\u0432\\u0438\\u043B\\u0438\\u0441\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B? \\u041F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u043D\\u0430\\u043C!\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: messageIcon,\n            alt: \"Message icon\",\n            className: \"icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-window ${isOpen ? 'open' : 'close'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [toUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: backArrow,\n            alt: \"\\u041D\\u0430\\u0437\\u0430\\u0434\",\n            className: \"icon\",\n            onClick: () => {\n              ws.close();\n              setWs(null);\n              setToUser(null);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"\\u0427\\u0430\\u0442 \\u0441 \", toUser]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u0412\\u0430\\u0448\\u0438 \\u0447\\u0430\\u0442\\u044B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: closeIcon,\n          alt: \"Close chat\",\n          className: \"icon\",\n          onClick: () => setIsOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 11\n      }, this), !toUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-field\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0447\\u0430\\u0442\\u043E\\u0432...\",\n            value: searchQuery,\n            onChange: e => setSearchQuery(e.target.value),\n            className: \"search-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-list\",\n          children: conversations.filter(conversation => conversation.username.toLowerCase().includes(searchQuery.toLowerCase())).map((conversation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-item\",\n            onClick: () => {\n              setToUser(conversation.username);\n              handleClickOnChat(conversation.username);\n            },\n            children: conversation.username\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-chat-button\",\n          onClick: () => setShowNewChatInput(true),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: plusIcon,\n            alt: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0447\\u0430\\u0442\",\n            className: \"add-chat-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 15\n        }, this), showNewChatInput && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0438\\u043C\\u044F \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\",\n            value: newChatUsername,\n            onChange: e => setNewChatUsername(e.target.value),\n            onKeyPress: handleNewChatKeyPress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNewChatSubmit,\n            children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0447\\u0430\\u0442\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowNewChatInput(false),\n            children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-body\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message-bubble ${msg.type === 'sent' ? 'sent' : 'received'}`,\n            children: [msg.text && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 34\n            }, this), msg.timestamp && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"timestamp\",\n              children: new Date(msg.timestamp).toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n            value: inputValue,\n            onChange: e => setInputValue(e.target.value),\n            className: \"input-with-emoji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: stickerIcon,\n            alt: \"\\u0421\\u0442\\u0438\\u043A\\u0435\\u0440\\u044B\",\n            className: \"emoji-button\",\n            onClick: () => setShowEmojiPicker(!showEmojiPicker)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: sendIcon,\n            alt: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n            className: \"send-button\",\n            onClick: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 17\n          }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"emoji-picker\",\n            children: ['😊', '😂', '😍', '😎'].map((emoji, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setInputValue(inputValue + emoji),\n              children: emoji\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 561,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"b2wr6vxkVGNz35k4715Gjd+7bJA=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","axios","messageIcon","closeIcon","backArrow","sendIcon","searchIcon","clipIcon","stickerIcon","plusIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","isOpen","setIsOpen","inputValue","setInputValue","file","setFile","showEmojiPicker","setShowEmojiPicker","ws","setWs","error","setError","isAuthenticated","setIsAuthenticated","isRegistering","setIsRegistering","fromUser","setFromUser","toUser","setToUser","messages","setMessages","password","setPassword","searchQuery","setSearchQuery","conversations","setConversations","showNewChatInput","setShowNewChatInput","newChatUsername","setNewChatUsername","loadConversations","response","post","data","handleNewChatSubmit","username","exists","handleClickOnChat","handleNewChatKeyPress","e","key","handleSend","trim","timestamp","Date","toISOString","messageData","JSON","stringify","text","URL","createObjectURL","send","console","log","socket","WebSocket","onopen","onmessage","event","parse","prevMessages","onclose","handleRegister","alert","handleLogin","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","onClick","src","alt","close","filter","conversation","toLowerCase","includes","map","index","onKeyPress","msg","toLocaleTimeString","hour","minute","emoji","_c","$RefreshReg$"],"sources":["/home/plotvichka_2/bsu/3_course/TP/Online-market/react-project/market/src/components/Chat.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './Chat.css';\n// import './ChatAuth.css'\n// import './Error.css'\n// import axios from 'axios'\n// import messageIcon from './chatIcons/ChatIcon.svg';\n// import closeIcon from './chatIcons/CloseIcon.svg';\n// import backArrow from './chatIcons/BackArrow.png'\n// import sendIcon from './chatIcons/SendIcon.svg';\n// import searchIcon from './chatIcons/SearchIcon.svg';\n// import clipIcon from './chatIcons/ClipIcon.svg';\n// import stickerIcon from './chatIcons/StickerIcon.svg';\n//\n// const Chat = () => {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const [inputValue, setInputValue] = useState('');\n//   const [file, setFile] = useState(null);\n//   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n//   const [ws, setWs] = useState(null);\n//\n//   const [error, setError] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n//   const [isRegistering, setIsRegistering] = useState(false); // Registration state\n//   const [fromUser, setFromUser] = useState('');\n//   const [toUser, setToUser] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [password, setPassword] = useState('');\n//\n//   const [searchQuery, setSearchQuery] = useState(\"\"); // Запрос поиска\n//   const [conversations, setConversations] = useState([])\n//\n//\n//   // useEffect(() => {\n//   //   console.log(\"using useEffect\")\n//   //   console.log(new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit'}));\n//   //   const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/`);\n//   //   socket.onopen = () => console.log('WebSocket connected');\n//   //   socket.onmessage = (event) => {\n//   //     const data = JSON.parse(event.data);\n//   //     console.log(data)\n//   //     // setMessages((prev) => [...prev, data]);\n//   //     // setMessages([data])\n//   //   };\n//   //   socket.onerror = (error) => console.error('WebSocket Error:', error);\n//   //   socket.onclose = () => console.log('WebSocket connection closed');\n//   //   setWs(socket);\n//   //\n//   //   return () => {\n//   //     socket.close();\n//   //   };\n//   // }, [fromUser]);\n//\n//     // const handleSend = () => {\n//     //   if (inputValue.trim() || file) {\n//     //     console.log(\"sending message..\")\n//     //     const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n//     //     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${username}/${selectedChat.username}/`);\n//     //     socket.onopen = () => {\n//     //       console.log('WebSocket connected');\n//     //       console.log(\"before send\")\n//     //       ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n//     //       console.log(\"after send\")\n//     //     }\n//     //     socket.onmessage = (event) => {\n//     //       const data = JSON.parse(event.data);\n//     //       selectedChat.messages = [selectedChat.messages, data.message]\n//     //       console.log(selectedChat)\n//     //       // setMessages((prev) => [...prev, data]);\n//     //       // setMessages([data])\n//     //     };\n//     //     socket.onerror = (error) => console.error('WebSocket Error:', error);\n//     //     socket.onclose = () => console.log('WebSocket connection closed');\n//     //     setWs(socket)\n//     //   // return () => {\n//     //   //   socket.close();\n//     //   // };\n//     //   //   if (ws) {\n//     //   //     ws.send(JSON.stringify({ text: inputValue, file: file ? URL.createObjectURL(file) : null, timestamp }));\n//     //   //   }\n//     //     setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n//     //     setInputValue('');\n//     //     setFile(null);\n//     //     console.log(\"end sending...\")\n//     //   }\n//     // };\n//\n//   const handleSend = () => {\n//   if (inputValue.trim() || file) {\n//     const timestamp = new Date().toISOString();\n//       const messageData = JSON.stringify({\n//               text: inputValue,\n//               file: file ? URL.createObjectURL(file) : null,\n//               timestamp,\n//             });\n//\n//             ws.send(messageData);\n//             console.log(\"Message sent:\", messageData);\n//\n//             // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n//             setInputValue('');\n//             setFile(null);\n//   }\n// };\n//\n//\n//   const handleLogin = async () => {\n//   if (fromUser && password) {\n//     // setIsAuthenticated(true);\n//     try {\n//       let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n//       if (response.data.success) {\n//         setIsAuthenticated(true);\n//       } else {\n//         setError('Неверный логин или пароль');\n//       }\n//     } catch (error) {\n//       setError('Ошибка при авторизации');\n//     }\n//   } else {\n//     setError('Введите корректные данные для входа.');\n//   }\n// };\n//\n//   const handleClickOnChat = async (toUser) => {\n//     const response = await axios.post('http://localhost:8000/chat/load/messages/', { fromUser, toUser });\n//     console.log(response)\n//     console.log(response.data)\n//     setMessages(response.data)\n//     console.log(\"Messages set\")\n//\n//     // console.log(response.data.alina)\n//     console.log(\"Initializing WebSocket...\");\n//     console.log(`${toUser}`)\n//     console.log(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`)\n//     const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n//\n//     // Создаем Promise для ожидания успешного подключения WebSocket\n//     const waitForConnection = new Promise((resolve, reject) => {\n//       socket.onopen = () => {\n//         console.log('WebSocket connected');\n//         resolve(socket);\n//       };\n//       socket.onerror = (error) => {\n//         console.error('WebSocket Error:', error);\n//         reject(error);\n//       };\n//     });\n//\n//     waitForConnection\n//         .then((connectedSocket) => {\n//           setWs(connectedSocket);\n//         })\n//         .catch((error) => {\n//           console.error(\"Failed to establish WebSocket connection:\", error);\n//         });\n//\n//     // socket.onmessage = (event) => {\n//     //   const data = JSON.parse(event.data);\n//     //   console.log(\"Message received:\", data);\n//     //   console.log(messages)\n//     //   setMessages((prevMessages) => [\n//     //     ...prevMessages,\n//     //     // { text: data.message, type: 'received', timestamp: data.timestamp },\n//     //     data.message\n//     //   ]);\n//     //   console.log(messages)\n//     // }\n//     socket.onmessage = (event) => {\n//       const data = JSON.parse(event.data);\n//       console.log(\"Message received:\", data);\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         // { text: data.message, type: 'sent', timestamp: data.timestamp }\n//           data\n//       ]);\n//       console.log(data.timestamp)\n//     };\n//\n//     socket.onclose = () => {\n//       console.log('WebSocket connection closed');\n//     };\n//   }\n//\n//\n//   const handleRegister = () => {\n//     // Mock registration logic; replace with API call if needed\n//     if (fromUser && password) {\n//       alert('Пользователь зарегистрирован!');\n//       setIsRegistering(false);\n//     } else {\n//       alert('Введите корректные данные для регистрации.');\n//     }\n//   };\n//\n//   const loadConversations = async () => {\n//     console.log(\"load conversations\")\n//     const response = await axios.post('http://localhost:8000/chat/load/conversations/', { fromUser });\n//     console.log(response)\n//     console.log(response.data)\n//     setConversations(response.data)\n//   }\n//\n//   if (!isAuthenticated) {\n//     return (\n//         <div className=\"auth-container\">\n//           <div className=\"auth-box\">\n//             <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Логин\"\n//                 value={fromUser}\n//                 onChange={(e) => setFromUser(e.target.value)}\n//                 className=\"auth-input\"\n//             />\n//             <input\n//                 type=\"password\"\n//                 placeholder=\"Пароль\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//                 className=\"auth-input\"\n//             />\n//             <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n//               {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n//             </button>\n//             <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n//               {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n//             </button>\n//\n//             {/* Отображение ошибки */}\n//             {error && (\n//                 <div className=\"auth-error\">\n//                   <img src=\"/path/to/error-icon.svg\" alt=\"Error\" className=\"error-icon\" />\n//                   <span>{error}</span>\n//                 </div>\n//             )}\n//           </div>\n//         </div>\n//     );\n//   }\n//\n//\n//\n//   return (\n//       <div>\n//         {!isOpen ? (\n//             <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n//               <div className=\"input-container\"\n//                    onClick={() => loadConversations()}\n//               >\n//                 Появились вопросы? Пишите нам!\n//                 <div className=\"icon-container\">\n//                   <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n//                 </div>\n//               </div>\n//             </div>\n//         ) : (\n//             <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n//               <div className=\"chat-header\">\n//                 {toUser ? (\n//                     <>\n//                       {/*<button*/}\n//                       {/*    className=\"back-button\"*/}\n//                       {/*    onClick={() => setSelectedChat(null)}*/}\n//                       {/*>*/}\n//                       {/*  ← Назад*/}\n//                       {/*</button>*/}\n//                       <img\n//                           src={backArrow}\n//                           alt=\"Назад\"\n//                           className=\"icon\"\n//                           onClick={() => {\n//                             ws.close();\n//                             setWs(null);\n//                             setToUser(null);\n//                           }\n//                           }\n//                       />\n//                       <span>Чат с {toUser}</span>\n//                     </>\n//                 ) : (\n//                     <span>Ваши чаты</span>\n//                 )}\n//                 <img\n//                     src={closeIcon}\n//                     alt=\"Close chat\"\n//                     className=\"icon\"\n//                     onClick={() => setIsOpen(false)}\n//                 />\n//               </div>\n//\n//               {!toUser ? (\n//                   <>\n//                     {/* Поле поиска */}\n//                     <div className=\"search-field\">\n//                       <input\n//                           type=\"text\"\n//                           placeholder=\"Поиск чатов...\"\n//                           value={searchQuery}\n//                           onChange={(e) => setSearchQuery(e.target.value)}\n//                           className=\"search-input\"\n//                       />\n//                     </div>\n//\n//                     {/* Список чатов */}\n//                     <div className=\"chat-list\">\n//                       {conversations\n//                           .filter((conversation) =>\n//                               conversation.username\n//                                   .toLowerCase()\n//                                   .includes(searchQuery.toLowerCase())\n//                           )\n//                           .map((conversation, index) => (\n//                               <div\n//                                   key={index}\n//                                   className=\"chat-item\"\n//                                   onClick={() => {\n//                                     console.log(\"set WebSocket\");\n//                                     setToUser(conversation.username);\n//                                     handleClickOnChat(conversation.username);\n//                                   }\n//                                   }\n//                               >\n//                                 {conversation.username}\n//                               </div>\n//                           ))}\n//                     </div>\n//                   </>\n//               ) : (\n//                   <>\n//                     {/* Переписка с выбранным собеседником */}\n//                     <div className=\"chat-body\">\n//                       {messages.map((msg, index) => (\n//                           <div\n//                               key={index}\n//                               className={`message-bubble ${msg.type === 'sent' ? 'sent' : 'received'}`}\n//                           >\n//                             {msg.text && <p>{msg.text}</p>}\n//                             {msg.timestamp && (\n//                                 <span className=\"timestamp\">\n//                                   {new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})}\n//                                 </span>\n//                             )}\n//                           </div>\n//                       ))}\n//                     </div>\n//\n//\n//                     {/* Поле ввода сообщения */}\n//                     <div className=\"chat-input\">\n//                       <input\n//                           type=\"text\"\n//                           placeholder=\"Введите сообщение\"\n//                           value={inputValue}\n//                           onChange={(e) => setInputValue(e.target.value)}\n//                           className=\"input-with-emoji\"\n//                       />\n//                       <img\n//                           src={stickerIcon}\n//                           alt=\"Стикеры\"\n//                           className=\"emoji-button\"\n//                           onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n//                       />\n//                       {/*<button*/}\n//                       {/*    className=\"emoji-button\"*/}\n//                       {/*    onClick={() => setShowEmojiPicker(!showEmojiPicker)}*/}\n//                       {/*>*/}\n//                       {/*  😊*/}\n//                       {/*</button>*/}\n//                       {/*<button className=\"send-button\" onClick={handleSend}>*/}\n//                       {/*  Отправить*/}\n//                       {/*</button>*/}\n//                       <img\n//                           src={sendIcon}\n//                           alt=\"Отправить\"\n//                           className=\"send-button\"\n//                           onClick={handleSend}\n//                       />\n//                       {showEmojiPicker && (\n//                           <div className=\"emoji-picker\">\n//                             {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n//                                 <button\n//                                     key={index}\n//                                     onClick={() => setInputValue(inputValue + emoji)}\n//                                 >\n//                                   {emoji}\n//                                 </button>\n//                             ))}\n//                           </div>\n//                       )}\n//                     </div>\n//                   </>\n//               )}\n//             </div>\n//         )}\n//       </div>\n//   );\n// };\n//\n// export default Chat;\n\nimport React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport './ChatAuth.css';\nimport './Error.css';\nimport axios from 'axios';\nimport messageIcon from './chatIcons/ChatIcon.svg';\nimport closeIcon from './chatIcons/CloseIcon.svg';\nimport backArrow from './chatIcons/BackArrow.png';\nimport sendIcon from './chatIcons/SendIcon.svg';\nimport searchIcon from './chatIcons/SearchIcon.svg';\nimport clipIcon from './chatIcons/ClipIcon.svg';\nimport stickerIcon from './chatIcons/StickerIcon.svg';\nimport plusIcon from './chatIcons/PlusIcon1.png'; // Add a plus icon for creating new chats\n\nconst Chat = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [file, setFile] = useState(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [ws, setWs] = useState(null);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Authentication state\n  const [isRegistering, setIsRegistering] = useState(false); // Registration state\n  const [fromUser, setFromUser] = useState('');\n  const [toUser, setToUser] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [password, setPassword] = useState('');\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Search query\n  const [conversations, setConversations] = useState([]);\n  const [showNewChatInput, setShowNewChatInput] = useState(false); // Control visibility of input field\n  const [newChatUsername, setNewChatUsername] = useState(''); // Store new chat username\n\n  // Fetch conversations after login\n  const loadConversations = async () => {\n    const response = await axios.post('http://localhost:8000/chat/load/conversations/', { fromUser });\n    setConversations(response.data);\n  };\n\n  const handleNewChatSubmit = async () => {\n    if (newChatUsername) {\n      try {\n        const response = await axios.post('http://localhost:8000/chat/check_user/', { username: newChatUsername });\n        if (response.data.exists) {\n          // Create a new chat with the user\n          setToUser(newChatUsername);\n          handleClickOnChat(newChatUsername);\n          setShowNewChatInput(false);\n        } else {\n          setError('Пользователь не найден');\n        }\n      } catch (error) {\n        setError('Ошибка при создании чата');\n      }\n    }\n  };\n\n  const handleNewChatKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleNewChatSubmit();\n    }\n  };\n    const handleSend = () => {\n  if (inputValue.trim() || file) {\n    const timestamp = new Date().toISOString();\n      const messageData = JSON.stringify({\n              text: inputValue,\n              file: file ? URL.createObjectURL(file) : null,\n              timestamp,\n            });\n\n            ws.send(messageData);\n            console.log(\"Message sent:\", messageData);\n\n            // setMessages([...messages, { text: inputValue, file, type: 'sent', timestamp }]);\n            setInputValue('');\n            setFile(null);\n  }\n};\n  const handleClickOnChat = async (toUser) => {\n    const response = await axios.post('http://localhost:8000/chat/load/messages/', { fromUser, toUser });\n    setMessages(response.data);\n    const socket = new WebSocket(`ws://localhost:8000/ws/chats/${fromUser}/${toUser}/`);\n    socket.onopen = () => {\n      console.log('WebSocket connected');\n    };\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      setMessages((prevMessages) => [...prevMessages, data]);\n    };\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n    setWs(socket);\n  };\n\n    const handleRegister = () => {\n    // Mock registration logic; replace with API call if needed\n    if (fromUser && password) {\n      alert('Пользователь зарегистрирован!');\n      setIsRegistering(false);\n    } else {\n      alert('Введите корректные данные для регистрации.');\n    }\n  };\n\n  const handleLogin = async () => {\n    if (fromUser && password) {\n      try {\n        let response = await axios.post('http://localhost:8000/chat/login/', { fromUser, password });\n        if (response.data.success) {\n          setIsAuthenticated(true);\n          loadConversations();\n        } else {\n          setError('Неверный логин или пароль');\n        }\n      } catch (error) {\n        setError('Ошибка при авторизации');\n      }\n    } else {\n      setError('Введите корректные данные для входа.');\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"auth-container\">\n        <div className=\"auth-box\">\n          <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>\n          <input\n            type=\"text\"\n            placeholder=\"Логин\"\n            value={fromUser}\n            onChange={(e) => setFromUser(e.target.value)}\n            className=\"auth-input\"\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Пароль\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"auth-input\"\n          />\n          <button onClick={isRegistering ? handleRegister : handleLogin} className=\"auth-button\">\n            {isRegistering ? 'Зарегистрироваться' : 'Войти'}\n          </button>\n          <button onClick={() => setIsRegistering(!isRegistering)} className=\"toggle-button\">\n            {isRegistering ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}\n          </button>\n          {error && (\n            <div className=\"auth-error\">\n              <img src=\"/path/to/error-icon.svg\" alt=\"Error\" className=\"error-icon\" />\n              <span>{error}</span>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {!isOpen ? (\n        <div className=\"chat-container\" onClick={() => setIsOpen(true)}>\n          <div className=\"input-container\" onClick={() => loadConversations()}>\n            Появились вопросы? Пишите нам!\n            <div className=\"icon-container\">\n              <img src={messageIcon} alt=\"Message icon\" className=\"icon\" />\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={`chat-window ${isOpen ? 'open' : 'close'}`}>\n          <div className=\"chat-header\">\n            {toUser ? (\n              <>\n                <img\n                  src={backArrow}\n                  alt=\"Назад\"\n                  className=\"icon\"\n                  onClick={() => {\n                    ws.close();\n                    setWs(null);\n                    setToUser(null);\n                  }}\n                />\n                <span>Чат с {toUser}</span>\n              </>\n            ) : (\n              <span>Ваши чаты</span>\n            )}\n            <img\n              src={closeIcon}\n              alt=\"Close chat\"\n              className=\"icon\"\n              onClick={() => setIsOpen(false)}\n            />\n          </div>\n\n          {!toUser ? (\n            <>\n              <div className=\"search-field\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Поиск чатов...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"search-input\"\n                />\n              </div>\n\n              <div className=\"chat-list\">\n                {conversations\n                  .filter((conversation) =>\n                    conversation.username.toLowerCase().includes(searchQuery.toLowerCase())\n                  )\n                  .map((conversation, index) => (\n                    <div\n                      key={index}\n                      className=\"chat-item\"\n                      onClick={() => {\n                        setToUser(conversation.username);\n                        handleClickOnChat(conversation.username);\n                      }}\n                    >\n                      {conversation.username}\n                    </div>\n                  ))}\n              </div>\n\n              <div className=\"new-chat-button\" onClick={() => setShowNewChatInput(true)}>\n                {/*<img src={plusIcon} alt=\"Добавить чат\" className=\"add-chat-button\" />*/}\n                {/*<img alt=\"Добавить чат\" />*/}\n                <img\n                    src={plusIcon}\n                    alt=\"Добавить чат\"\n                    className=\"add-chat-button\"\n                />\n              </div>\n\n              {showNewChatInput && (\n                  <div className=\"new-chat-input\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Введите имя пользователя\"\n                    value={newChatUsername}\n                    onChange={(e) => setNewChatUsername(e.target.value)}\n                    onKeyPress={handleNewChatKeyPress}\n                  />\n                  <button onClick={handleNewChatSubmit}>Создать чат</button>\n                  <button onClick={() => setShowNewChatInput(false)}>Отменить</button>\n                </div>\n              )}\n            </>\n          ) : (\n            <>\n              <div className=\"chat-body\">\n                {messages.map((msg, index) => (\n                  <div key={index} className={`message-bubble ${msg.type === 'sent' ? 'sent' : 'received'}`}>\n                    {msg.text && <p>{msg.text}</p>}\n                    {msg.timestamp && (\n                      <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"chat-input\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Введите сообщение\"\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                  className=\"input-with-emoji\"\n                />\n                <img\n                  src={stickerIcon}\n                  alt=\"Стикеры\"\n                  className=\"emoji-button\"\n                  onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n                />\n                <img\n                  src={sendIcon}\n                  alt=\"Отправить\"\n                  className=\"send-button\"\n                  onClick={handleSend}\n                />\n                {showEmojiPicker && (\n                  <div className=\"emoji-picker\">\n                    {['😊', '😂', '😍', '😎'].map((emoji, index) => (\n                      <button key={index} onClick={() => setInputValue(inputValue + emoji)}>\n                        {emoji}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}